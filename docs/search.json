[{"path":[]},{"path":"/articles/oHMMed.html","id":"example-data","dir":"Articles","previous_headings":"1) Normal model","what":"1.1) Example data","title":"","text":"","code":"N <- 2^10 true_T <- rbind(c(0.95, 0.05, 0),                c(0.025, 0.95, 0.025),                c(0.0, 0.05, 0.95))  true_means <- c(-5, 0, 5) true_sd <- 1.5  simdata_full <- hmm_simulate_normal_data(L = N,                                         mat_T = true_T,                                         means = true_means,                                         sigma = true_sd) simdata <- simdata_full$data plot(density(simdata), main = \"\")"},{"path":"/articles/oHMMed.html","id":"mcmc-simulation","dir":"Articles","previous_headings":"1) Normal model","what":"1.2) MCMC Simulation","title":"","text":"","code":"# Set priors n_states_inferred <- 3 prior_T <- generate_random_T(n_states_inferred) prior_means <- c(-7, -1, 12) prior_sd <- 3  # Run MCMC iter <- 1500           warmup <- floor(iter * 0.4) print_params <- FALSE      verbose <- TRUE  res_normal <- hmm_mcmc_normal(data = simdata,                               prior_T = prior_T,                               prior_means = prior_means,                               prior_sd = prior_sd,                               iter = 1500,                               print_params = FALSE,                               verbose = FALSE) res_normal #> Model: HMM Normal  #> Type: MCMC  #> Iter: 1500  #> Warmup: 300  #> Thin: 1  #> States: 3  summary_res_normal <- summary(res_normal) #> Estimated means: #>     mean[1]     mean[2]     mean[3]  #> -4.84206407 -0.07710225  5.07102243  #>  #> Estimated standard deviation: #> 1.518011 #>  #> Estimated transition rates: #>            1          2          3 #> 1 0.94658255 0.05341745 0.00000000 #> 2 0.03160574 0.94588114 0.02251312 #> 3 0.00000000 0.06168916 0.93831084 #>  #> Number of windows assigned to hidden states: #>   1   2   3  #> 310 524 190  #>  #> Approximate Kullback-Leibler divergence between observed and estimated distributions: #> -0.0006399195 #>  #> Log Likelihood: #>         mean           sd       median  #> -2087.331615     1.830004 -2086.963357  #>  #> P-value of t-test for difference between means of states (stepwise): #> [1] 1.719287e-229 6.823092e-184"},{"path":"/articles/oHMMed.html","id":"diagnostics","dir":"Articles","previous_headings":"1) Normal model","what":"1.3) Diagnostics","title":"","text":"","code":"plot(res_normal)"},{"path":[]},{"path":"/articles/oHMMed.html","id":"example-data-1","dir":"Articles","previous_headings":"2) Gamma-Poisson model","what":"2.1) Example data","title":"","text":"","code":"L1 <- 2^13   true_T1 <- rbind(c(0.99, 0.01, 0),                  c(0.01, 0.98, 0.01),                  c(0.0, 0.01, 0.99))  true_betas1 <- 1 / (c(0.2, 1.5, 9))  true_alpha1 <- 1.3                    simdata1full <- hmm_simulate_gamma_poisson_data(L = L1,                                                 mat_T = true_T1,                                                 betas = true_betas1,                                                 alpha = true_alpha1)  simdata1 <- simdata1full$data hist(simdata1, breaks = 50, main = \"\")"},{"path":"/articles/oHMMed.html","id":"mcmc-simulation-1","dir":"Articles","previous_headings":"2) Gamma-Poisson model","what":"2.2) MCMC Simulation","title":"","text":"","code":"iter <- 4000               warmup <- floor(iter * 0.55) print_params <- FALSE      verbose <- TRUE             n3_states_inferred <- 3 prior3_T <- generate_random_T(n3_states_inferred) prior_alpha3 <- (mean(simdata1)^2) / ((var(simdata1) - mean(simdata1)) / 3)   prior_betas3 <- c(5,3,1)  res_gamma_poisson <- hmm_mcmc_gamma_poisson(data = simdata1,                                                          prior_T = prior3_T,                                                          prior_betas = prior_betas3,                                                          prior_alpha = prior_alpha3,                                                          iter = iter,                                                          warmup = warmup,                                                          print_params = print_params,                                                          verbose = verbose) #> 10% #> 20% #> 30% #> 40% #> 50% #> 60% #> 70% #> 80% #> 90% #> 100%  res_gamma_poisson #> Model: HMM Gamma-Poisson  #> Type: MCMC  #> Iter: 4000  #> Warmup: 2200  #> Thin: 1  #> States: 3  summary_res_gamma_poisson <- summary(res_gamma_poisson) #> Estimated betas: #>   beta[1]   beta[2]   beta[3]  #> 5.5016732 0.6867794 0.1154821  #>  #> Estimated alpha: #> 1.312733 #>  #> Estimated means: #> 0.2390537 1.912613 11.37133 #>  #> Estimated transition rates: #>            1          2          3 #> 1 0.98861753 0.01138247 0.00000000 #> 2 0.01340607 0.97459836 0.01199558 #> 3 0.00000000 0.01200495 0.98799505 #>  #> Number of windows assigned to hidden states: #>    1    2    3  #> 3055 2560 2577  #>  #> Kullback-Leibler divergence between observed and estimated distributions: #> 0.02734883 #>  #> Log Likelihood: #>          mean            sd        median  #> -16040.377771      1.629396 -16040.063964  #>  #> P-value of poisson test for difference between rates of states (stepwise): #> [1] 0 0"},{"path":"/articles/oHMMed.html","id":"diagnostics-1","dir":"Articles","previous_headings":"2) Gamma-Poisson model","what":"2.3) Diagnostics","title":"","text":"","code":"plot(res_gamma_poisson)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michal Majka. Author, maintainer. Lynette Caitlin Mikula. Author. Claus Vogl. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Inference Genomic Landscapes using Ordered Hidden Markov Models Emission Densities (oHMMed) Claus Vogl, Mariia Karapetiants, Burçin Yıldırım, Hrönn Kjartansdóttir, Carolin Kosiol, Juraj Bergman, Michal Majka, Lynette Caitlin Mikula. bioRxiv 2023.06.26.546495; doi: https://doi.org/10.1101/2023.06.26.546495","code":"@Unpublished{,   title = {Inference of Genomic Landscapes using Ordered Hidden Markov Models with Emission Densities (oHMMed)},   author = {Claus Vogl and Mariia Karapetiants and Burcin Yildirim and Hroenn Kjartansdottir and Carolin Kosiol and Juraj Bergman and Michal Majka and Lynette Caitlin Mikula},   journal = {bioRxiv},   year = {2023},   doi = {10.1101/2023.06.26.546495},   url = {https://www.biorxiv.org/content/early/2023/06/28/2023.06.26.546495},   eprint = {https://www.biorxiv.org/content/early/2023/06/28/2023.06.26.546495.full.pdf},   note = {In Peer-Review}, }"},{"path":[]},{"path":"/index.html","id":"id_1-overview","dir":"","previous_headings":"","what":"1. Overview","title":"HMMs with Ordered Hidden States and Emission Densities","text":"oHMMed package contains implementation Hidden Markov Models ordered hidden states emission densities. precisely: assume sequence un-observable (’hidden’) variables discrete categories known states. Moving along sequence, probability specific state occurring step depends state preceding . hidden variable along sequence produces/’emits’ observable data point. assume emitted data points distributed according continuous distribution (currently: normal gamma-poisson compound) state-specific parameters. , assume continuous emission distributions per state parametrised can ordered increasing mean. fact, transitions states hidden sequence can occur states emit densities neighbours ordering mean. Given observed data sequence, models assign part hidden sequence state, infer transition rates well parameters state-specific emission distributions. general framework oHMMed (ordered Hidden Markov Model emission densities), can applied system fulfils assumptions.","code":""},{"path":"/index.html","id":"id_2-installation","dir":"","previous_headings":"","what":"2. Installation","title":"HMMs with Ordered Hidden States and Emission Densities","text":"can install latest stable cran version using (recommended): order install latest stable development version GitHub can use: development version can installed using:","code":"install.packages(\"oHMMed\") # install.packages(\"devtools\") devtools::install_github(\"LynetteCaitlin/oHMMed@*release\") # install.packages(\"devtools\") devtools::install_github(\"LynetteCaitlin/oHMMed\")"},{"path":"/index.html","id":"id_3-usage-recommendations","dir":"","previous_headings":"","what":"3. Usage Recommendations","title":"HMMs with Ordered Hidden States and Emission Densities","text":"Usage recommendations can found file.","code":""},{"path":"/reference/coef.hmm_mcmc_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Estimates — coef.hmm_mcmc_normal","title":"Extract Model Estimates — coef.hmm_mcmc_normal","text":"coef generic function extracts model estimates mcmc_hmm_* objects","code":""},{"path":"/reference/coef.hmm_mcmc_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Estimates — coef.hmm_mcmc_normal","text":"","code":"# S3 method for hmm_mcmc_normal coef(object, ...)  # S3 method for hmm_mcmc_gamma_poisson coef(object, ...)"},{"path":"/reference/coef.hmm_mcmc_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Estimates — coef.hmm_mcmc_normal","text":"object object class inheriting \"mcmc_hmm_*\" ... used","code":""},{"path":"/reference/coef.hmm_mcmc_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Estimates — coef.hmm_mcmc_normal","text":"Estimates extracted MCMC HMM objects","code":""},{"path":"/reference/coef.hmm_mcmc_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Model Estimates — coef.hmm_mcmc_normal","text":"","code":"coef(example_hmm_mcmc_normal) #> $means #>   mean[1]   mean[2]   mean[3]  #> 0.5486377 1.0052886 1.9054420  #>  #> $sd #> [1] 0.1983137 #>  #> $mat_T #>           [,1]      [,2]      [,3] #> [1,] 0.6916361 0.3083639 0.0000000 #> [2,] 0.3205970 0.5760693 0.1033337 #> [3,] 0.0000000 0.3734367 0.6265633 #>  coef(example_hmm_mcmc_gamma_poisson) #> $betas #>   beta[1]   beta[2]   beta[3]  #> 5.5567893 0.6803553 0.1114030  #>  #> $alpha #> [1] 1.302679 #>  #> $means #>  means[1]  means[2]  means[3]  #>  0.234817  1.915574 11.696640  #>  #> $mat_T #>            [,1]       [,2]       [,3] #> [1,] 0.98701139 0.01298861 0.00000000 #> [2,] 0.01237949 0.97545367 0.01216684 #> [3,] 0.00000000 0.01201136 0.98798864 #>"},{"path":"/reference/conf_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and Visualise a Confusion Matrix — conf_mat","title":"Calculate and Visualise a Confusion Matrix — conf_mat","text":"diagnostic function tests reliability estimation procedures given inferred transition rates","code":""},{"path":"/reference/conf_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and Visualise a Confusion Matrix — conf_mat","text":"","code":"conf_mat(N, res, plot = TRUE)"},{"path":"/reference/conf_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and Visualise a Confusion Matrix — conf_mat","text":"N (numeric) number simulations res (mcmc_hmm_*) simulated MCMC HMM model plot (logical) plot confusion matrix. default TRUE","code":""},{"path":"/reference/conf_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and Visualise a Confusion Matrix — conf_mat","text":"confusion_matrix","code":""},{"path":"/reference/conf_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and Visualise a Confusion Matrix — conf_mat","text":"First data simulated given inferred model parameters transition rates. posterior probabilities calculated states inferred. Finally, inferred states simulated states compared via confusion_matrix function.","code":""},{"path":"/reference/conf_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and Visualise a Confusion Matrix — conf_mat","text":"","code":"if (interactive()) {   res <- conf_mat(100, example_hmm_mcmc_normal, plot = TRUE)  }"},{"path":"/reference/convert_to_ggmcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts MCMC Samples into ggmcmc Format — convert_to_ggmcmc","title":"Converts MCMC Samples into ggmcmc Format — convert_to_ggmcmc","text":"helper function converts MCMC samples ggmcmc format","code":""},{"path":"/reference/convert_to_ggmcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts MCMC Samples into ggmcmc Format — convert_to_ggmcmc","text":"","code":"convert_to_ggmcmc(   x,   pattern = c(\"mean\", \"sigma\", \"beta\", \"alpha\", \"pois_means\", \"T\"),   include_warmup = FALSE )"},{"path":"/reference/convert_to_ggmcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts MCMC Samples into ggmcmc Format — convert_to_ggmcmc","text":"x (mcmc_hmm_*) MCMC HMM object pattern (character) pattern(s) model parameters included output include_warmup (logical) include warmup samples. default FALSE","code":""},{"path":"/reference/convert_to_ggmcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts MCMC Samples into ggmcmc Format — convert_to_ggmcmc","text":"data.frame compatible functions ggmcmc package","code":""},{"path":"/reference/convert_to_ggmcmc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converts MCMC Samples into ggmcmc Format — convert_to_ggmcmc","text":"default, given model, parameters converted ggmcmc format. parameter pattern can used extract specific parameters. instance pattern=\"mean\" extracts mean parameters  hmm_mcmc_normal model. specific parameter interest can matched exact name: pattern=c(\"mean[1]\", \"T[1,1]\").","code":""},{"path":"/reference/convert_to_ggmcmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts MCMC Samples into ggmcmc Format — convert_to_ggmcmc","text":"","code":"# Convert all parameters (Normal model) convert_normal_all <- convert_to_ggmcmc(example_hmm_mcmc_normal) unique(convert_normal_all$Parameter) #>  [1] \"mean[1]\"  \"mean[2]\"  \"mean[3]\"  \"sigma[1]\" \"T[1,1]\"   \"T[2,1]\"   #>  [7] \"T[3,1]\"   \"T[1,2]\"   \"T[2,2]\"   \"T[3,2]\"   \"T[1,3]\"   \"T[2,3]\"   #> [13] \"T[3,3]\"   head(convert_normal_all) #>   Iteration Chain Parameter     value #> 1       601     1   mean[1] 0.5463710 #> 2       602     1   mean[1] 0.5439514 #> 3       603     1   mean[1] 0.5453779 #> 4       604     1   mean[1] 0.5444471 #> 5       605     1   mean[1] 0.5525009 #> 6       606     1   mean[1] 0.5475645 tail(convert_normal_all) #>       Iteration Chain Parameter     value #> 11695      1495     1    T[3,3] 0.6241444 #> 11696      1496     1    T[3,3] 0.6087342 #> 11697      1497     1    T[3,3] 0.6132930 #> 11698      1498     1    T[3,3] 0.6293610 #> 11699      1499     1    T[3,3] 0.5908851 #> 11700      1500     1    T[3,3] 0.6535850  # Convert only means (Normal model) convert_normal_means <- convert_to_ggmcmc(example_hmm_mcmc_normal,                                            pattern = \"mean\") unique(convert_normal_means$Parameter) #> [1] \"mean[1]\" \"mean[2]\" \"mean[3]\"  # Convert selected parameter (Normal model) pattern_normal <- c(\"mean[1]\", \"sigma[1]\", \"T[1,1]\") convert_normal_param <- convert_to_ggmcmc(example_hmm_mcmc_normal,                                            pattern = pattern_normal) unique(convert_normal_param$Parameter) #> [1] \"mean[1]\"  \"sigma[1]\" \"T[1,1]\"    # Convert all parameters (Poisson-Gamma model) convert_pois_gamma_all <- convert_to_ggmcmc(example_hmm_mcmc_gamma_poisson) unique(convert_pois_gamma_all$Parameter) #>  [1] \"means[1]\" \"means[2]\" \"means[3]\" \"beta[1]\"  \"beta[2]\"  \"beta[3]\"  #>  [7] \"alpha[1]\" \"T[1,1]\"   \"T[2,1]\"   \"T[3,1]\"   \"T[1,2]\"   \"T[2,2]\"   #> [13] \"T[3,2]\"   \"T[1,3]\"   \"T[2,3]\"   \"T[3,3]\""},{"path":"/reference/eigen_system.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Eigenvalues and Eigenvectors — eigen_system","title":"Calculate Eigenvalues and Eigenvectors — eigen_system","text":"helper function returns eigenvalues lambda left right eigenvectors forwards backwards","code":""},{"path":"/reference/eigen_system.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Eigenvalues and Eigenvectors — eigen_system","text":"","code":"eigen_system(mat)"},{"path":"/reference/eigen_system.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Eigenvalues and Eigenvectors — eigen_system","text":"mat (matrix) square matrix","code":""},{"path":"/reference/eigen_system.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Eigenvalues and Eigenvectors — eigen_system","text":"list three elements: lambda: eigenvalues forwards: left eigenvector backwards: right eigenvector","code":""},{"path":"/reference/eigen_system.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Eigenvalues and Eigenvectors — eigen_system","text":"","code":"mat_T0 <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) eigen_system(mat_T0) #> $lambda #> [1] 1.00 0.99 0.97 #>  #> $forwards #>            [,1]          [,2]      [,3] #> [1,]  0.3333333  3.333333e-01 0.3333333 #> [2,] -0.3333333 -2.631640e-16 0.3333333 #> [3,]  0.2222222 -4.444444e-01 0.2222222 #>  #> $backwards #>      [,1]          [,2]  [,3] #> [1,]    1 -1.500000e+00  0.75 #> [2,]    1 -1.040834e-15 -1.50 #> [3,]    1  1.500000e+00  0.75 #>"},{"path":"/reference/example_hmm_mcmc_gamma_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_gamma_poisson","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_gamma_poisson","text":"Example Simulated Gamma-Poisson Model","code":""},{"path":"/reference/example_hmm_mcmc_gamma_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_gamma_poisson","text":"","code":"example_hmm_mcmc_gamma_poisson"},{"path":"/reference/example_hmm_mcmc_gamma_poisson.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_gamma_poisson","text":"hmm_mcmc_gamma_poisson object","code":""},{"path":"/reference/example_hmm_mcmc_gamma_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_gamma_poisson","text":"","code":"# Data stored in the object hist(example_hmm_mcmc_gamma_poisson$data,       breaks = 50, xlab = \"\", main = \"\")   # Priors used in simulation example_hmm_mcmc_gamma_poisson$priors #> $prior_betas #> [1] 5 3 1 #>  #> $prior_alpha #> [1] 1.047478 #>  #> $prior_T #>           [,1]      [,2]      [,3] #> [1,] 0.2611659 0.7388341 0.0000000 #> [2,] 0.2607206 0.4662956 0.2729838 #> [3,] 0.0000000 0.2181791 0.7818209 #>   # Model example_hmm_mcmc_gamma_poisson #> Model: HMM Gamma-Poisson  #> Type: MCMC  #> Iter: 1500  #> Warmup: 600  #> Thin: 1  #> States: 3   summary(example_hmm_mcmc_gamma_poisson) #> Estimated betas: #>   beta[1]   beta[2]   beta[3]  #> 5.5567893 0.6803553 0.1114030  #>  #> Estimated alpha: #> 1.302679 #>  #> Estimated means: #> 0.234817 1.915574 11.69664 #>  #> Estimated transition rates: #>            1          2          3 #> 1 0.98701139 0.01298861 0.00000000 #> 2 0.01237949 0.97545367 0.01216684 #> 3 0.00000000 0.01201136 0.98798864 #>  #> Number of windows assigned to hidden states: #>    1    2    3  #> 2640 2748 2804  #>  #> Kullback-Leibler divergence between observed and estimated distributions: #> 0.03114409 #>  #> Log Likelihood: #>          mean            sd        median  #> -16995.384239      1.407003 -16995.160683  #>  #> P-value of poisson test for difference between rates of states (stepwise): #> 1-2 2-3  #>   0   0  #>"},{"path":"/reference/example_hmm_mcmc_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of a Simulated Normal Model — example_hmm_mcmc_normal","title":"Example of a Simulated Normal Model — example_hmm_mcmc_normal","text":"Example Simulated Normal Model","code":""},{"path":"/reference/example_hmm_mcmc_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of a Simulated Normal Model — example_hmm_mcmc_normal","text":"","code":"example_hmm_mcmc_normal"},{"path":"/reference/example_hmm_mcmc_normal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of a Simulated Normal Model — example_hmm_mcmc_normal","text":"hmm_mcmc_normal object","code":""},{"path":"/reference/example_hmm_mcmc_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of a Simulated Normal Model — example_hmm_mcmc_normal","text":"","code":"# Data stored in the object plot(density(example_hmm_mcmc_normal$data), main = \"\")   # Priors used in simulation example_hmm_mcmc_normal$priors #> $prior_means #> [1] 0.60 0.95 1.95 #>  #> $prior_sd #> [1] 0.1564129 #>  #> $prior_T #>           [,1]      [,2]      [,3] #> [1,] 0.5347611 0.4652389 0.0000000 #> [2,] 0.2121507 0.1163606 0.6714886 #> [3,] 0.0000000 0.5884313 0.4115687 #>   # Model example_hmm_mcmc_normal #> Model: HMM Normal  #> Type: MCMC  #> Iter: 1500  #> Warmup: 600  #> Thin: 1  #> States: 3   summary(example_hmm_mcmc_normal) #> Estimated means: #>   mean[1]   mean[2]   mean[3]  #> 0.5486377 1.0052886 1.9054420  #>  #> Estimated standard deviation: #> 0.1983137 #>  #> Estimated transition rates: #>           1         2         3 #> 1 0.6916361 0.3083639 0.0000000 #> 2 0.3205970 0.5760693 0.1033337 #> 3 0.0000000 0.3734367 0.6265633 #>  #> Number of windows assigned to hidden states: #>    1    2    3  #> 3698 3517  977  #>  #> Approximate Kullback-Leibler divergence between observed and estimated distributions: #> 0.0122497 #>  #> Log Likelihood: #>         mean           sd       median  #> -2795.575088     1.799081 -2795.238206  #>  #> P-value of t-test for difference between means of states (stepwise): #> 1-2 2-3  #>   0   0  #>"},{"path":"/reference/example_hmm_mcmc_pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_pois","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_pois","text":"Example Simulated Gamma-Poisson Model","code":""},{"path":"/reference/example_hmm_mcmc_pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_pois","text":"","code":"data(example_hmm_mcmc_pois)"},{"path":"/reference/example_hmm_mcmc_pois.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_pois","text":"hmm_mcmc_poisson object","code":""},{"path":"/reference/example_hmm_mcmc_pois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_pois","text":"","code":"# Data hist(example_hmm_mcmc_pois$data, breaks = 50, xlab = \"\", main = \"\")   # Priors example_hmm_mcmc_pois$priors #> $prior_betas #> [1] 5 3 1 #>  #> $prior_alpha #> [1] 1.410104 #>  #> $prior_T #>           [,1]      [,2]      [,3] #> [1,] 0.2804014 0.7195986 0.0000000 #> [2,] 0.0964973 0.3146985 0.5888042 #> [3,] 0.0000000 0.4415601 0.5584399 #>   # Model example_hmm_mcmc_pois #> Model: HMM Poisson-Gamma  #> Type: MCMC  #> Iter: 2000  #> Warmup: 800  #> Thin: 1  #> States: 3  summary(example_hmm_mcmc_pois) #> Estimated betas: #>   beta[1]   beta[2]   beta[3]  #> 5.4481574 0.6566282 0.1122534  #>  #> Estimated alpha: #> 1.330606 #>  #> Estimated means: #> 0.2446946 2.028259 11.85617 #>  #> Estimated transition rates: #>            1           2          3 #> 1 0.99107833 0.008921666 0.00000000 #> 2 0.01309276 0.967353793 0.01955345 #> 3 0.00000000 0.008808412 0.99119159 #>  #> Assigned states: #>    1    2    3  #> 2558 1756 3878  #>  #> Approximate Kullback-Leibler divergence: #> 0.02809406 #>  #> Log Likelihood: #>         mean           sd       median  #> -18918.09690      1.65408 -18917.81980  #>  #> Significance of Difference between Rates (stepwise): #> [1] 0 0 #>"},{"path":"/reference/generate_random_T.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Random Transition Matrix — generate_random_T","title":"Generate a Random Transition Matrix — generate_random_T","text":"helper function generates transition matrix random testing purposes","code":""},{"path":"/reference/generate_random_T.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Random Transition Matrix — generate_random_T","text":"","code":"generate_random_T(n = 3)"},{"path":"/reference/generate_random_T.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Random Transition Matrix — generate_random_T","text":"n (integer) dimension transition matrix","code":""},{"path":"/reference/generate_random_T.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Random Transition Matrix — generate_random_T","text":"random n x n transition matrix","code":""},{"path":"/reference/generate_random_T.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Random Transition Matrix — generate_random_T","text":"Uniform random numbers \\([0,1]\\) used fill matrix. Rows normalized.","code":""},{"path":"/reference/generate_random_T.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Random Transition Matrix — generate_random_T","text":"","code":"mat_T <- generate_random_T(3) mat_T #>           [,1]      [,2]      [,3] #> [1,] 0.3899009 0.6100991 0.0000000 #> [2,] 0.2913738 0.3125758 0.3960504 #> [3,] 0.0000000 0.4514329 0.5485671  rowSums(mat_T) #> [1] 1 1 1"},{"path":"/reference/get_pi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Prior Probability of States — get_pi","title":"Get the Prior Probability of States — get_pi","text":"Calculate prior probability states correspond stationary distribution transition matrix T","code":""},{"path":"/reference/get_pi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Prior Probability of States — get_pi","text":"","code":"get_pi(mat_T = NULL)"},{"path":"/reference/get_pi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Prior Probability of States — get_pi","text":"mat_T (matrix) transition matrix","code":""},{"path":"/reference/get_pi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Prior Probability of States — get_pi","text":"numeric vector","code":""},{"path":"/reference/get_pi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Prior Probability of States — get_pi","text":"assumed prior probability states corresponds stationary distribution transition matrix \\(T\\), denoted \\(\\pi\\) entries \\(\\pi_i=Pr(\\theta_{l-1}=)\\).","code":""},{"path":"/reference/get_pi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Prior Probability of States — get_pi","text":"","code":"T_mat <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) T_mat #>      [,1] [,2] [,3] #> [1,] 0.99 0.01 0.00 #> [2,] 0.01 0.98 0.01 #> [3,] 0.00 0.01 0.99 get_pi(T_mat) #> [1] 0.3333333 0.3333333 0.3333333"},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC Sampler sampler for the Hidden Markov with Gamma-Poisson emission densities — hmm_mcmc_gamma_poisson","title":"MCMC Sampler sampler for the Hidden Markov with Gamma-Poisson emission densities — hmm_mcmc_gamma_poisson","text":"MCMC Sampler sampler Hidden Markov Gamma-Poisson emission densities","code":""},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC Sampler sampler for the Hidden Markov with Gamma-Poisson emission densities — hmm_mcmc_gamma_poisson","text":"","code":"hmm_mcmc_gamma_poisson(   data,   prior_T,   prior_betas,   prior_alpha = 1,   iter = 5000,   warmup = floor(iter/1.5),   thin = 1,   seed = sample.int(.Machine$integer.max, 1),   init_T = NULL,   init_betas = NULL,   init_alpha = NULL,   print_params = TRUE,   verbose = TRUE )"},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC Sampler sampler for the Hidden Markov with Gamma-Poisson emission densities — hmm_mcmc_gamma_poisson","text":"data (numeric) data prior_T (matrix) prior transition matrix prior_betas (numeric) prior beta parameters prior_alpha (numeric) single prior alpha parameter. default, prior_alpha=1 iter (integer) number MCMC iterations warmup (integer) number warmup iterations thin (integer) thinning parameter. default, 1 seed (integer) seed parameter init_T (matrix) optional parameter; initial transition matrix init_betas (numeric) optional parameter; initial beta parameters init_alpha (numeric) optional parameter; initial alpha parameter print_params (logical) optional parameter; print estimated parameters every iteration. default, TRUE verbose (logical) optional parameter; print additional messages. default, TRUE","code":""},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC Sampler sampler for the Hidden Markov with Gamma-Poisson emission densities — hmm_mcmc_gamma_poisson","text":"List following elements: data: data used simulation samples: list samples estimates: list various estimates idx: indices iterations warmup period priors: prior parameters inits: initial parameters last_iter: list samples last MCMC iteration info: list various meta information object","code":""},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC Sampler sampler for the Hidden Markov with Gamma-Poisson emission densities — hmm_mcmc_gamma_poisson","text":"Please see supplementary material doi:10.1101/2023.06.26.546495  details algorithm. usage recommendations please see https://github.com/LynetteCaitlin/oHMMed/blob/main/UsageRecommendations.pdf.","code":""},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MCMC Sampler sampler for the Hidden Markov with Gamma-Poisson emission densities — hmm_mcmc_gamma_poisson","text":"Inference Genomic Landscapes using Ordered Hidden Markov Models Emission Densities (oHMMed) Claus Vogl, Mariia Karapetiants, Burçin Yıldırım, Hrönn Kjartansdóttir, Carolin Kosiol, Juraj Bergman, Michal Majka, Lynette Caitlin Mikula, bioRxiv 2023.06.26.546495; doi:10.1101/2023.06.26.546495","code":""},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC Sampler sampler for the Hidden Markov with Gamma-Poisson emission densities — hmm_mcmc_gamma_poisson","text":"","code":"# Simulate Poisson-Gamma data N <- 2^10 true_T <- rbind(c(0.95, 0.05, 0),                 c(0.025, 0.95, 0.025),                 c(0.0, 0.05, 0.95))  true_betas <- c(2, 1, 0.1) true_alpha <- 1  simdata_full <- hmm_simulate_gamma_poisson_data(L = N,                                                 mat_T = true_T,                                                 betas = true_betas,                                                 alpha = true_alpha) simdata <- simdata_full$data hist(simdata, breaks = 40, probability = TRUE,        main = \"Distribution of the simulated Poisson-Gamma data\") lines(density(simdata), col = \"red\")   # Set numbers of states to be inferred n_states_inferred <- 3  # Set priors prior_T <- generate_random_T(n_states_inferred) prior_betas <- c(1, 0.5, 0.1) prior_alpha <- 3  # Simmulation settings iter <- 50 warmup <- floor(iter / 5) # 20 percent thin <- 1 seed <- sample.int(10000, 1) print_params <- FALSE # if TRUE then parameters are printed in each iteration verbose <- FALSE # if TRUE then the state of the simulation is printed  # Run MCMC sampler res <- hmm_mcmc_gamma_poisson(data = simdata,                               prior_T = prior_T,                               prior_betas = prior_betas,                               prior_alpha = prior_alpha,                               iter = iter,                               warmup = warmup,                                 thin = thin,                               seed = seed,                               print_params = print_params,                               verbose = verbose) res #> Model: HMM Gamma-Poisson  #> Type: MCMC  #> Iter: 50  #> Warmup: 10  #> Thin: 1  #> States: 3   summary(res)# summary output can be also assigned to a variable #> Estimated betas: #>   beta[1]   beta[2]   beta[3]  #> 8.1807432 0.8882555 0.2364923  #>  #> Estimated alpha: #> 6.174786 #>  #> Estimated means: #> 0.7702437 7.167983 26.87433 #>  #> Estimated transition rates: #>           1          2         3 #> 1 0.9648974 0.03510261 0.0000000 #> 2 0.3068970 0.47639366 0.2167093 #> 3 0.0000000 0.85753211 0.1424679 #>  #> Number of windows assigned to hidden states: #>   1   2   3  #> 909  93  22  #>  #> Kullback-Leibler divergence between observed and estimated distributions: #> 0.2791032 #>  #> Log Likelihood: #>        mean          sd      median  #> -1607.55243    20.12937 -1599.72537  #>  #> P-value of poisson test for difference between rates of states (stepwise): #>           1-2           2-3  #>  0.000000e+00 4.379921e-111  #>   coef(res) # extract model estimates #> $betas #>   beta[1]   beta[2]   beta[3]  #> 8.1807432 0.8882555 0.2364923  #>  #> $alpha #> [1] 6.174786 #>  #> $means #>   means[1]   means[2]   means[3]  #>  0.7702437  7.1679826 26.8743281  #>  #> $mat_T #>           [,1]       [,2]      [,3] #> [1,] 0.9648974 0.03510261 0.0000000 #> [2,] 0.3068970 0.47639366 0.2167093 #> [3,] 0.0000000 0.85753211 0.1424679 #>   # plot(res) # MCMC diagnostics"},{"path":"/reference/hmm_mcmc_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC Sampler for the Hidden Markov Model with Normal emission densities — hmm_mcmc_normal","title":"MCMC Sampler for the Hidden Markov Model with Normal emission densities — hmm_mcmc_normal","text":"MCMC Sampler Hidden Markov Model Normal emission densities","code":""},{"path":"/reference/hmm_mcmc_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC Sampler for the Hidden Markov Model with Normal emission densities — hmm_mcmc_normal","text":"","code":"hmm_mcmc_normal(   data,   prior_T,   prior_means,   prior_sd,   iter = 600,   warmup = floor(iter/5),   thin = 1,   seed = sample.int(.Machine$integer.max, 1),   init_T = NULL,   init_means = NULL,   init_sd = NULL,   print_params = TRUE,   verbose = TRUE )"},{"path":"/reference/hmm_mcmc_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC Sampler for the Hidden Markov Model with Normal emission densities — hmm_mcmc_normal","text":"data (numeric) normal data prior_T (matrix) prior transition matrix prior_means (numeric) prior means prior_sd (numeric) single prior standard deviation iter (integer) number MCMC iterations warmup (integer) number warmup iterations thin (integer) thinning parameter. default, 1 seed (integer) optional parameter; seed parameter init_T (matrix) optional parameter; initial transition matrix init_means (numeric) optional parameter; initial means init_sd (numeric) optional parameter; initial standard deviation print_params (logical) optional parameter; print parameters every iteration. default, TRUE verbose (logical) optional parameter; print additional messages. default, TRUE","code":""},{"path":"/reference/hmm_mcmc_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC Sampler for the Hidden Markov Model with Normal emission densities — hmm_mcmc_normal","text":"List following elements: data: data used simulation samples: list samples estimates: list various estimates idx: indices iterations warmup period priors: prior parameters inits: initial parameters last_iter: list samples last MCMC iteration info: list various meta information object","code":""},{"path":"/reference/hmm_mcmc_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC Sampler for the Hidden Markov Model with Normal emission densities — hmm_mcmc_normal","text":"Please see supplementary material doi:10.1101/2023.06.26.546495  details algorithm. usage recommendations please see https://github.com/LynetteCaitlin/oHMMed/blob/main/UsageRecommendations.pdf.","code":""},{"path":"/reference/hmm_mcmc_normal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MCMC Sampler for the Hidden Markov Model with Normal emission densities — hmm_mcmc_normal","text":"Inference Genomic Landscapes using Ordered Hidden Markov Models Emission Densities (oHMMed) Claus Vogl, Mariia Karapetiants, Burçin Yıldırım, Hrönn Kjartansdóttir, Carolin Kosiol, Juraj Bergman, Michal Majka, Lynette Caitlin Mikula, bioRxiv 2023.06.26.546495; doi:10.1101/2023.06.26.546495","code":""},{"path":"/reference/hmm_mcmc_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC Sampler for the Hidden Markov Model with Normal emission densities — hmm_mcmc_normal","text":"","code":"# Simulate normal data N <- 2^10 true_T <- rbind(c(0.95, 0.05, 0),                 c(0.025, 0.95, 0.025),                 c(0.0, 0.05, 0.95))  true_means <- c(-5, 0, 5) true_sd <- 1.5  simdata_full <- hmm_simulate_normal_data(L = N,                                           mat_T = true_T,                                           means = true_means,                                          sigma = true_sd) simdata <- simdata_full$data hist(simdata,       breaks = 40,       probability = TRUE,        main = \"Distribution of the simulated normal data\") lines(density(simdata), col = \"red\")   # Set numbers of states to be inferred n_states_inferred <- 3  # Set priors prior_T <- generate_random_T(n_states_inferred) prior_means <- c(-18, -1, 12) prior_sd <- 3  # Simmulation settings iter <- 50 warmup <- floor(iter / 5) # 20 percent thin <- 1 seed <- sample.int(10000, 1) print_params <- FALSE # if TRUE then parameters are printed in each iteration verbose <- FALSE # if TRUE then the state of the simulation is printed  # Run MCMC sampler res <- hmm_mcmc_normal(data = simdata,                        prior_T = prior_T,                        prior_means = prior_means,                        prior_sd = prior_sd,                        iter = iter,                        warmup = warmup,                        seed = seed,                        print_params = print_params,                        verbose = verbose) res #> Model: HMM Normal  #> Type: MCMC  #> Iter: 50  #> Warmup: 10  #> Thin: 1  #> States: 3   summary(res) # summary output can be also assigned to a variable #> Estimated means: #>   mean[1]   mean[2]   mean[3]  #> -1.817207 -1.525115  4.934967  #>  #> Estimated standard deviation: #> 3.372965 #>  #> Estimated transition rates: #>           1          2         3 #> 1 0.2088988 0.79110124 0.0000000 #> 2 0.9320392 0.04525841 0.0227024 #> 3 0.0000000 0.44908693 0.5509131 #>  #> Number of windows assigned to hidden states: #>   1   2   3  #> 565 210 249  #>  #> Approximate Kullback-Leibler divergence between observed and estimated distributions: #> 0.02090816 #>  #> Log Likelihood: #>       mean         sd     median  #> -2687.9448   200.6619 -2511.3180  #>  #> P-value of t-test for difference between means of states (stepwise): #>           1-2           2-3  #>  3.744176e-05 2.255927e-124  #>   coef(res) # extract model estimates #> $means #>   mean[1]   mean[2]   mean[3]  #> -1.817207 -1.525115  4.934967  #>  #> $sd #> [1] 3.372965 #>  #> $mat_T #>           [,1]       [,2]      [,3] #> [1,] 0.2088988 0.79110124 0.0000000 #> [2,] 0.9320392 0.04525841 0.0227024 #> [3,] 0.0000000 0.44908693 0.5509131 #>   # plot(res) # MCMC diagnostics"},{"path":"/reference/hmm_mcmc_pois.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"MCMC simulation Hidden Markov Normal Model Poisson model","code":""},{"path":"/reference/hmm_mcmc_pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"","code":"hmm_mcmc_pois(   data,   prior_T,   prior_betas,   prior_alpha = 1,   iter = 1500,   warmup = floor(iter/1.5),   thin = 1,   seed = sample.int(.Machine$integer.max, 1),   init_T = NULL,   init_betas = NULL,   init_alpha = NULL,   print_params = TRUE,   verbose = TRUE )"},{"path":"/reference/hmm_mcmc_pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"data (numeric) data prior_T (matrix) prior transition matrix prior_betas (numeric) prior beta parameters prior_alpha (numeric) single prior alpha parameter. default, prior_alpha=1 iter (integer) number MCMC iterations warmup (integer) number warmup iterations thin (integer) thinning parameter. default, 1 seed (integer) seed parameter init_T (matrix) optional parameter; initial transition matrix init_betas (numeric) optional parameter; initial beta parameters init_alpha (numeric) optional parameter; initial alpha parameter print_params (logical) optional parameter; print estimated parameters every iteration. default, TRUE verbose (logical) optional parameter; print additional messages. default, TRUE","code":""},{"path":"/reference/hmm_mcmc_pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"List following elements: data: data used simulation samples: list samples estimates: list various estimates idx: indices iterations warmup period priors: prior parameters inits: initial parameters last_iter: list samples last MCMC iteration info: list various meta information object","code":""},{"path":"/reference/hmm_mcmc_pois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"details","code":""},{"path":"/reference/hmm_mcmc_pois.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"references","code":""},{"path":"/reference/hmm_mcmc_pois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"","code":"# Simulate Poisson-Gamma data N <- 2^10 true_T <- rbind(c(0.95, 0.05, 0),                 c(0.025, 0.95, 0.025),                 c(0.0, 0.05, 0.95))  true_betas <- c(2, 1, 0.1) true_alpha <- 1  simdata_full <- hmm_simulate_poisgamma_data(L = N,                                             mat_T = true_T,                                             betas = true_betas,                                             alpha = true_alpha) simdata <- simdata_full$data hist(simdata, breaks = 40, probability = TRUE,        main = \"Distribution of the simulated Poisson-Gamma data\") lines(density(simdata), col = \"red\")   # Set numbers of states to be inferred n_states_inferred <- 3  # Set priors prior_T <- generate_random_T(n_states_inferred) prior_betas <- c(1, 0.5, 0.1) prior_alpha <- 3  # Simmulation settings iter <- 50 warmup <- floor(iter / 5) # 20 percent thin <- 1 seed <- sample.int(10000, 1) print_params <- FALSE # if TRUE then parameters are printed in each iteration verbose <- FALSE # if TRUE then the state of the simulation is printed  # Run MCMC sampler res <- hmm_mcmc_pois(data = simdata,                      prior_T = prior_T,                      prior_betas = prior_betas,                      prior_alpha = prior_alpha,                      iter = iter,                      warmup = warmup,                        thin = thin,                      seed = seed,                      print_params = print_params,                      verbose = verbose) res #> Model: HMM Poisson-Gamma  #> Type: MCMC  #> Iter: 50  #> Warmup: 10  #> Thin: 1  #> States: 3   summary(res)# summary output can be also assigned to a variable #> Estimated betas: #>   beta[1]   beta[2]   beta[3]  #> 1.3668561 0.1251987 0.0746723  #>  #> Estimated alpha: #> 0.9575238 #>  #> Estimated means: #> 0.7023229 7.847835 13.10924 #>  #> Estimated transition rates: #>            1          2         3 #> 1 0.98198977 0.01801023 0.0000000 #> 2 0.07110897 0.58903919 0.3398518 #> 3 0.00000000 0.64663491 0.3533651 #>  #> Assigned states: #>   1   2   3  #> 748 223  53  #>  #> Approximate Kullback-Leibler divergence: #> 0.2919717 #>  #> Log Likelihood: #>         mean           sd       median  #> -1878.521333     1.193999 -1878.443050  #>  #> Significance of Difference between Rates (stepwise): #> [1]  0.000000e+00 6.263565e-252 #>   coef(res) # extract model estimates #> $betas #>   beta[1]   beta[2]   beta[3]  #> 1.3668561 0.1251987 0.0746723  #>  #> $alpha #> [1] 0.9575238 #>  #> $means #>   means[1]   means[2]   means[3]  #>  0.7023229  7.8478351 13.1092414  #>  #> $mat_T #>            [,1]       [,2]      [,3] #> [1,] 0.98198977 0.01801023 0.0000000 #> [2,] 0.07110897 0.58903919 0.3398518 #> [3,] 0.00000000 0.64663491 0.3533651 #>   # plot(res) # MCMC diagnostics"},{"path":"/reference/hmm_simulate_gamma_poisson_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data distributed according to oHMMed with gamma-poisson emission densities — hmm_simulate_gamma_poisson_data","title":"Simulate data distributed according to oHMMed with gamma-poisson emission densities — hmm_simulate_gamma_poisson_data","text":"Simulate data distributed according oHMMed gamma-poisson emission densities","code":""},{"path":"/reference/hmm_simulate_gamma_poisson_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data distributed according to oHMMed with gamma-poisson emission densities — hmm_simulate_gamma_poisson_data","text":"","code":"hmm_simulate_gamma_poisson_data(L, mat_T, betas, alpha)"},{"path":"/reference/hmm_simulate_gamma_poisson_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data distributed according to oHMMed with gamma-poisson emission densities — hmm_simulate_gamma_poisson_data","text":"L (integer) number simulations mat_T (matrix) square matrix initial state betas (numeric) rate parameter rgamma emission probabilities alpha (numeric) shape parameter rgamma emission probabilities","code":""},{"path":"/reference/hmm_simulate_gamma_poisson_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data distributed according to oHMMed with gamma-poisson emission densities — hmm_simulate_gamma_poisson_data","text":"Returns list following elements: data: numeric vector data states: integer vector \"true\" hidden states used generate data vector pi: numeric vector prior probability states","code":""},{"path":"/reference/hmm_simulate_gamma_poisson_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data distributed according to oHMMed with gamma-poisson emission densities — hmm_simulate_gamma_poisson_data","text":"","code":"mat_T <- rbind(c(1-0.01, 0.01, 0),                c(0.01, 1-0.02, 0.01),                c(0, 0.01, 1-0.01)) L <- 2^7 betas <- c(0.1, 0.3, 0.5) alpha <- 1  sim_data <- hmm_simulate_gamma_poisson_data(L = L,                                             mat_T = mat_T,                                             betas = betas,                                             alpha = alpha) hist(sim_data$data,       breaks = 40,      main = \"Histogram of Simulated Gamma-Poisson Data\",       xlab = \"\")  sim_data #> $data #>   [1]  0  0  1  1  5  1  0  6  0  3  1  1  5  0  1  1  0  4  5  2  0  0  5  0  1 #>  [26]  0  2  6  0  1  2  9  2  5  0  0  0  0  0  0  1  2  1  6  0  4  0  2  2  6 #>  [51]  2  2  0  2  1  1  0  0  1  1  0  9  1  0  1  0  0  1  2  7  0  1  1  3  1 #>  [76]  1  0  2 11  2  5  2  4  5  2  2 18  2  3  4  1  1  2  0  2  2  6  4  0  1 #> [101]  2  0  0  0  2  0  1  0  0  1  1  1  0  2  8 12  1  4  0  2  0  1  3  1  0 #> [126]  0  7  8 #>  #> $states #>   [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [38] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [75] 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #> [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #> Levels: 1 2 3 #>  #> $pi #> [1] 0.3333333 0.3333333 0.3333333 #>"},{"path":"/reference/hmm_simulate_normal_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data distributed according to oHMMed with normal emission densities — hmm_simulate_normal_data","title":"Simulate data distributed according to oHMMed with normal emission densities — hmm_simulate_normal_data","text":"Simulate data distributed according oHMMed normal emission densities","code":""},{"path":"/reference/hmm_simulate_normal_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data distributed according to oHMMed with normal emission densities — hmm_simulate_normal_data","text":"","code":"hmm_simulate_normal_data(L, mat_T, means, sigma)"},{"path":"/reference/hmm_simulate_normal_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data distributed according to oHMMed with normal emission densities — hmm_simulate_normal_data","text":"L (integer) number simulations mat_T (matrix) square matrix initial state means (numeric) mean parameter rnorm emission probabilities sigma (numeric) sd parameter rnorm emission probabilities","code":""},{"path":"/reference/hmm_simulate_normal_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data distributed according to oHMMed with normal emission densities — hmm_simulate_normal_data","text":"Returns list following elements: data: numeric vector data states: integer vector \"true\" hidden states used generate data vector pi: numeric vector prior probability states","code":""},{"path":"/reference/hmm_simulate_normal_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data distributed according to oHMMed with normal emission densities — hmm_simulate_normal_data","text":"","code":"mat_T0 <- rbind(c(1-0.01, 0.01, 0),                 c(0.01, 1-0.02, 0.01),                 c(0, 0.01, 1-0.01)) L <- 2^7 means0 <- c(-1,0,1) sigma0 <- 1  sim_data <- hmm_simulate_normal_data(L = L,                                       mat_T = mat_T0,                                       means = means0,                                       sigma = sigma0)                                       plot(density(sim_data$data), main = \"Density of Simulated Normal Data\")  sim_data #> $data #>   [1] -0.364843956 -0.507473001 -0.232159062  1.276013947 -0.394057312 #>   [6] -0.535739005  0.645678794 -1.527207852  1.045367720  0.576087553 #>  [11] -1.466069849 -0.189983638  0.119525922  0.424523847  0.252784052 #>  [16] -0.597816766  0.214451119 -0.107599280  0.751118319 -0.882024623 #>  [21]  2.852142821 -2.388197424  0.014494588 -2.652868675  0.068552648 #>  [26] -0.898911138 -1.141848868 -0.076632042 -0.663615174  1.213118230 #>  [31]  0.593712892  0.164835987  1.169401224 -0.183850729  0.037391977 #>  [36]  0.802758000 -0.021908164 -1.109748619  1.899149400 -0.605792724 #>  [41]  0.412985736  1.110415071  1.725415986 -0.501050079 -1.093638929 #>  [46]  0.021143550  0.454652915 -2.003072415  0.794072069  0.297950864 #>  [51] -0.640184031  0.689420701 -0.302511728  0.428695907  0.101072591 #>  [56] -0.464894281 -0.613359309 -0.218484280 -0.452097214  0.013977650 #>  [61] -0.357899750 -1.510914378 -0.519496611 -0.514044412  0.042192708 #>  [66]  0.059124775  0.981423366  2.225228430 -0.327940875  0.551068843 #>  [71] -1.159392093 -0.605815161 -0.692623167  0.902274877  1.690059771 #>  [76] -0.022435162 -1.264958983 -0.597664556 -1.638679662 -0.662265109 #>  [81] -2.538621015 -0.106377160 -0.806966585 -0.540598519  0.006127009 #>  [86]  0.290101988 -0.081771334 -1.776069613  0.745249247  0.864885000 #>  [91]  1.593095320 -0.895910600 -1.483184351 -2.948198799 -1.234693375 #>  [96]  0.751313551  0.389777577 -0.207836537  0.415175094 -0.194901062 #> [101]  1.086505002 -0.357856584  0.925833509  1.415412285 -0.477691563 #> [106] -1.756822288  1.045471705 -1.119581157  0.955603649  0.230867144 #> [111] -0.998749734  0.201468921 -0.754100586 -0.554989644  1.890915463 #> [116]  1.777092516  1.956682078  1.223284882  0.306502630  0.803159692 #> [121]  1.751788013 -0.127258985  2.684690763  1.079604787  0.566506781 #> [126]  0.796717267  0.261550044  1.829924013 #>  #> $states #>   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #> [112] 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #> Levels: 1 2 3 #>  #> $pi #> [1] 0.3333333 0.3333333 0.3333333 #>"},{"path":"/reference/hmm_simulate_poisgamma_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","title":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","text":"Simulate Hidden Markov Model based Poisson-gamma data","code":""},{"path":"/reference/hmm_simulate_poisgamma_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","text":"","code":"hmm_simulate_poisgamma_data(L, mat_T, betas, alpha)"},{"path":"/reference/hmm_simulate_poisgamma_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","text":"L (integer) number simulations mat_T (matrix) square matrix initial state betas (numeric) rate parameter rgamma emission probabilities alpha (numeric) shape parameter rgamma emission probabilities","code":""},{"path":"/reference/hmm_simulate_poisgamma_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","text":"returns data vector \"data\", \"true\" hidden states \"states\" used generate data vector prior probability states \"pi\".","code":""},{"path":"/reference/hmm_simulate_poisgamma_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","text":"","code":"mat_T <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) L <- 2^10 betas <- c(0.1, 0.3, 0.5) alpha <- 1  sim_data <- hmm_simulate_poisgamma_data(L = L,                                         mat_T = mat_T,                                         betas = betas,                                         alpha = alpha) hist(sim_data$data, breaks = 100, main = \"Histogram\")"},{"path":"/reference/kullback_leibler_cont_appr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a Continuous Approximation of the Kullback-Leibler Divergence — kullback_leibler_cont_appr","title":"Calculate a Continuous Approximation of the Kullback-Leibler Divergence — kullback_leibler_cont_appr","text":"Calculate Continuous Approximation Kullback-Leibler Divergence","code":""},{"path":"/reference/kullback_leibler_cont_appr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a Continuous Approximation of the Kullback-Leibler Divergence — kullback_leibler_cont_appr","text":"","code":"kullback_leibler_cont_appr(p, q)"},{"path":"/reference/kullback_leibler_cont_appr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a Continuous Approximation of the Kullback-Leibler Divergence — kullback_leibler_cont_appr","text":"p (numeric) probabilities q (numeric) probabilities","code":""},{"path":"/reference/kullback_leibler_cont_appr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a Continuous Approximation of the Kullback-Leibler Divergence — kullback_leibler_cont_appr","text":"Numeric vector","code":""},{"path":"/reference/kullback_leibler_cont_appr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a Continuous Approximation of the Kullback-Leibler Divergence — kullback_leibler_cont_appr","text":"continuous approximation Kullback-Leibler divergence calculated follows: $$   \\frac{1}{n}\\sum_{=1}^n\\big[\\log(p_i) p_i - \\log(q_i) p_i \\big] $$","code":""},{"path":"/reference/kullback_leibler_cont_appr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a Continuous Approximation of the Kullback-Leibler Divergence — kullback_leibler_cont_appr","text":"","code":"# Simulate n normally distributed variates n <- 1000 dist1 <- rnorm(n) dist2 <- rnorm(n, mean = 0, sd = 2) dist3 <- rnorm(n, mean = 2, sd = 2)  # Estimate probability density functions pdf1 <- density(dist1) pdf2 <- density(dist2) pdf3 <- density(dist3)  # Visualise PDFs plot(pdf1, main = \"PDFs\", col = \"red\", xlim = range(dist3)) lines(pdf2, col = \"blue\") lines(pdf3, col = \"green\")   # PDF 1 vs PDF 2 kullback_leibler_cont_appr(pdf1$y, pdf2$y) #> [1] 0.08149529  # PDF 1 vs PDF 3 kullback_leibler_cont_appr(pdf1$y, pdf3$y) #> [1] 0.09011388  # PDF 2 vs PDF 2 kullback_leibler_cont_appr(pdf2$y, pdf3$y) #> [1] 0.00584863"},{"path":"/reference/kullback_leibler_disc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a Kullback-Leibler Divergence for a Discrete Distribution — kullback_leibler_disc","title":"Calculate a Kullback-Leibler Divergence for a Discrete Distribution — kullback_leibler_disc","text":"Calculate Kullback-Leibler Divergence Discrete Distribution","code":""},{"path":"/reference/kullback_leibler_disc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a Kullback-Leibler Divergence for a Discrete Distribution — kullback_leibler_disc","text":"","code":"kullback_leibler_disc(p, q)"},{"path":"/reference/kullback_leibler_disc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a Kullback-Leibler Divergence for a Discrete Distribution — kullback_leibler_disc","text":"p (numeric) probabilities q (numeric) probabilities","code":""},{"path":"/reference/kullback_leibler_disc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a Kullback-Leibler Divergence for a Discrete Distribution — kullback_leibler_disc","text":"Numeric vector","code":""},{"path":"/reference/kullback_leibler_disc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a Kullback-Leibler Divergence for a Discrete Distribution — kullback_leibler_disc","text":"Kullback-Leibler divergence discrete distribution calculated follows: $$\\sum_{=1}^n p_i \\log\\Big(\\frac{p_i}{q_i}\\Big)$$","code":""},{"path":"/reference/kullback_leibler_disc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a Kullback-Leibler Divergence for a Discrete Distribution — kullback_leibler_disc","text":"","code":"# Simulate n Poisson distributed variates n <- 1000 dist1 <- rpois(n, lambda = 1) dist2 <- rpois(n, lambda = 5) dist3 <- rpois(n, lambda = 20)  # Generate common factor levels x_max <- max(c(dist1, dist2, dist3)) all_levels <- 0:x_max  # Estimate probability mass functions  pmf_dist1 <- table(factor(dist1, levels = all_levels)) / n pmf_dist2 <- table(factor(dist2, levels = all_levels)) / n pmf_dist3 <- table(factor(dist3, levels = all_levels)) / n  # Visualise PMFs barplot(pmf_dist1, col = \"green\", xlim = c(0, x_max)) barplot(pmf_dist2, col = \"red\", add = TRUE) barplot(pmf_dist3, col = \"blue\", add = TRUE)   # Calculate distances kullback_leibler_disc(pmf_dist1, pmf_dist2) #> [1] 2.327621 kullback_leibler_disc(pmf_dist1, pmf_dist3) #> [1] 26.34696 kullback_leibler_disc(pmf_dist2, pmf_dist3) #> [1] 24.14527"},{"path":"/reference/oHMMed-package.html","id":null,"dir":"Reference","previous_headings":"","what":"oHMMed: HMMs with Ordered Hidden States and Emission Densities — oHMMed-package","title":"oHMMed: HMMs with Ordered Hidden States and Emission Densities — oHMMed-package","text":"Inference using class Hidden Markov models (HMMs) called 'oHMMed'(ordered HMM emission densities doi:10.1101/2023.06.26.546495 ): 'oHMMed' algorithms identify number comparably homogeneous regions within observed sequences autocorrelation patterns. modelled discrete hidden states; observed data points realisations continuous probability distributions state-specific means enable ordering distributions. observed sequence labelled according hidden states, permitting neighbouring states also neighbours within ordering associated distributions. parameters characterise state-specific distributions inferred. Relevant application genomic sequences, time series, sequence data serial autocorrelation.","code":""},{"path":"/reference/oHMMed-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"oHMMed: HMMs with Ordered Hidden States and Emission Densities — oHMMed-package","text":"Inference Genomic Landscapes using Ordered Hidden Markov Models Emission Densities (oHMMed) Claus Vogl, Mariia Karapetiants, Burçin Yildirim, Hrönn Kjartansdottir, Carolin Kosiol, Juraj Bergman, Michal Majka, Lynette Caitlin Mikula, bioRxiv 2023.06.26.546495; doi:10.1101/2023.06.26.546495","code":""},{"path":[]},{"path":"/reference/oHMMed-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"oHMMed: HMMs with Ordered Hidden States and Emission Densities — oHMMed-package","text":"Maintainer: Michal Majka michalmajka@hotmail.com (ORCID) Authors: Lynette Caitlin Mikula lynettecaitlin@gmail.com (ORCID) Claus Vogl claus.vogl@vetmeduni.ac.(ORCID)","code":""},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Diagnostics for hmm_mcmc_gamma_poisson Objects — plot.hmm_mcmc_gamma_poisson","title":"Plot Diagnostics for hmm_mcmc_gamma_poisson Objects — plot.hmm_mcmc_gamma_poisson","text":"function creates variety diagnostic plots can useful  conducting Markov Chain Monte Carlo (MCMC) simulation gamma-poisson hidden Markov model (HMM).  plots help assess convergence, fit, performance MCMC simulation","code":""},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Diagnostics for hmm_mcmc_gamma_poisson Objects — plot.hmm_mcmc_gamma_poisson","text":"","code":"# S3 method for hmm_mcmc_gamma_poisson plot(   x,   simulation = FALSE,   true_betas = NULL,   true_alpha = NULL,   true_mat_T = NULL,   true_states = NULL,   show_titles = TRUE,   log_statesplot = FALSE,   ... )"},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Diagnostics for hmm_mcmc_gamma_poisson Objects — plot.hmm_mcmc_gamma_poisson","text":"x (hmm_mcmc_gamma_poisson) HMM MCMC gamma-poisson object simulation (logical); default simulation=FALSE, input data empirical. input data simulated, must set simulation=TRUE. true_betas (numeric) true betas. used simulation=TRUE true_alpha (numeric) true alpha. used simulation=TRUE true_mat_T (matrix) optional parameter; true transition matrix. used simulation=TRUE true_states (integer) optional parameter; true states. used simulation=TRUE show_titles (logical) TRUE titles shown graphs. default, TRUE log_statesplot (logical) TRUE log-statesplots shown. default, FALSE ... used","code":""},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Diagnostics for hmm_mcmc_gamma_poisson Objects — plot.hmm_mcmc_gamma_poisson","text":"Several diagnostic plots can used evaluate MCMC simulation gamma-poisson HMM","code":""},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Diagnostics for hmm_mcmc_gamma_poisson Objects — plot.hmm_mcmc_gamma_poisson","text":"","code":"# \\donttest{ plot(example_hmm_mcmc_gamma_poisson) #> Registered S3 method overwritten by 'GGally': #>   method from    #>   +.gg   ggplot2             # }"},{"path":"/reference/plot.hmm_mcmc_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Diagnostics for hmm_mcmc_normal Objects — plot.hmm_mcmc_normal","title":"Plot Diagnostics for hmm_mcmc_normal Objects — plot.hmm_mcmc_normal","text":"function creates variety diagnostic plots can useful  conducting Markov Chain Monte Carlo (MCMC) simulation normal hidden Markov model (HMM).  plots help assess convergence, fit, performance MCMC simulation","code":""},{"path":"/reference/plot.hmm_mcmc_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Diagnostics for hmm_mcmc_normal Objects — plot.hmm_mcmc_normal","text":"","code":"# S3 method for hmm_mcmc_normal plot(   x,   simulation = FALSE,   true_means = NULL,   true_sd = NULL,   true_mat_T = NULL,   true_states = NULL,   show_titles = TRUE,   ... )"},{"path":"/reference/plot.hmm_mcmc_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Diagnostics for hmm_mcmc_normal Objects — plot.hmm_mcmc_normal","text":"x (hmm_mcmc_normal) HMM MCMC normal object simulation (logical) optional parameter; default simulation=FALSE, input data empirical. input data simulated, must set simulation=TRUE. true_means (numeric) optional parameter; true means. used simulation=TRUE true_sd (numeric) optional parameter; true standard deviation. used simulation=TRUE true_mat_T (matrix) optional parameter; true transition matrix. used simulation=TRUE true_states (integer) optional parameter; true states. used simulation=TRUE show_titles (logical) optional parameter; TRUE titles shown graphs. default, TRUE ... used","code":""},{"path":"/reference/plot.hmm_mcmc_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Diagnostics for hmm_mcmc_normal Objects — plot.hmm_mcmc_normal","text":"Several diagnostic plots can used evaluate MCMC simulation normal HMM","code":""},{"path":"/reference/plot.hmm_mcmc_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Diagnostics for hmm_mcmc_normal Objects — plot.hmm_mcmc_normal","text":"","code":"# \\donttest{ plot(example_hmm_mcmc_normal)           # }"},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"Plot method hmm_mcmc_poisson objects","code":""},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"","code":"# S3 method for hmm_mcmc_poisson plot(   x,   simulation = FALSE,   true_betas = NULL,   true_alpha = NULL,   true_mat_T = NULL,   true_states = NULL,   ... )"},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"x (hmm_mcmc_\\*) MCMC HMM object simulation (logical) true_betas (numeric) true_alpha (numeric) true_mat_T (matrix) true_states (integer) ... used","code":""},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"return value","code":""},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"details","code":""},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"","code":"plot(example_hmm_mcmc_pois)"},{"path":"/reference/posterior_prob_gamma_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Poisson-Gamma Model — posterior_prob_gamma_poisson","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Poisson-Gamma Model — posterior_prob_gamma_poisson","text":"Forward-Backward Algorithm Calculate Posterior Probabilities Hidden States Poisson-Gamma Model","code":""},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Poisson-Gamma Model — posterior_prob_gamma_poisson","text":"","code":"posterior_prob_gamma_poisson(data, pi, mat_T, betas, alpha)"},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Poisson-Gamma Model — posterior_prob_gamma_poisson","text":"data (numeric) Poisson data pi (numeric) prior probability states mat_T (matrix) transition probability matrix betas (numeric) vector prior rates alpha (numeric) prior scale","code":""},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Poisson-Gamma Model — posterior_prob_gamma_poisson","text":"List following elements: F: auxiliary forward variables B: auxiliary backward variables s: weights","code":""},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Poisson-Gamma Model — posterior_prob_gamma_poisson","text":"Please see supplementary material doi:10.1101/2023.06.26.546495  details algorithm.","code":""},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Poisson-Gamma Model — posterior_prob_gamma_poisson","text":"","code":"mat_T <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) L <- 2^10 betas <- c(0.1, 0.3, 0.5) alpha <- 1  sim_data <- hmm_simulate_gamma_poisson_data(L = L,                                             mat_T = mat_T,                                             betas = betas,                                             alpha = alpha) pi <- sim_data$pi hmm_poison_data <- sim_data$data hist(hmm_poison_data, breaks = 100)   # Calculate posterior probabilities of hidden states post_prob <- posterior_prob_gamma_poisson(data = hmm_poison_data,                                           pi = pi,                                           mat_T = mat_T,                                           betas = betas,                                           alpha = alpha) str(post_prob) #> List of 3 #>  $ F: num [1:1024, 1:3] 0.6557 0.4515 0.352 0.161 0.0778 ... #>  $ B: num [1:1024, 1:3] 3.79 0.381 0.369 0.165 0.216 ... #>  $ s: num [1:1024] 0.0162 0.1193 0.0875 0.1995 0.1752 ..."},{"path":"/reference/posterior_prob_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Normal Model — posterior_prob_normal","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Normal Model — posterior_prob_normal","text":"Forward-Backward Algorithm Calculate Posterior Probabilities Hidden States Normal Model","code":""},{"path":"/reference/posterior_prob_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Normal Model — posterior_prob_normal","text":"","code":"posterior_prob_normal(data, pi, mat_T, means, sdev)"},{"path":"/reference/posterior_prob_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Normal Model — posterior_prob_normal","text":"data (numeric) normal data pi (numeric) prior probability states mat_T (matrix) transition probability matrix means (numeric) vector prior means sdev (numeric) prior standard deviation","code":""},{"path":"/reference/posterior_prob_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Normal Model — posterior_prob_normal","text":"List following elements: F: auxiliary forward variables B: auxiliary backward variables s: weights","code":""},{"path":"/reference/posterior_prob_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Normal Model — posterior_prob_normal","text":"Please see supplementary material doi:10.1101/2023.06.26.546495  details algorithm.","code":""},{"path":"/reference/posterior_prob_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-Backward Algorithm to Calculate the Posterior Probabilities of Hidden States in Normal Model — posterior_prob_normal","text":"","code":"prior_mat <- rbind(c(1-0.05, 0.05, 0),                   c(0.05, 1-0.1, 0.05),                   c(0, 0.05, 1-0.05))  prior_means <- c(-0.1, 0.0, 0.1) prior_sd  <- sqrt(0.1) L <- 100  # Simulate HMM model based on normal data based on prior information sim_data_normal <- hmm_simulate_normal_data(L = L,                                             mat_T = prior_mat,                                             means = prior_means,                                             sigma = prior_sd) pi <- sim_data_normal$pi # pi <- get_pi(prior_mat) hmm_norm_data <- sim_data_normal$data  # Calculate posterior probabilities of hidden states post_prob <-  posterior_prob_normal(data = hmm_norm_data,                                     pi = pi,                                     mat_T = prior_mat,                                     means = prior_means,                                     sdev = prior_sd) str(post_prob) #> List of 3 #>  $ F: num [1:100, 1:3] 0.321 0.491 0.504 0.41 0.516 ... #>  $ B: num [1:100, 1:3] 0.845 1.917 0.502 0.768 0.7 ... #>  $ s: num [1:100] 1.218 0.349 1.207 0.889 0.736 ..."},{"path":"/reference/posterior_probabilities_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"Forward-backward algorithm calculate posterior probabilities hidden states.","code":""},{"path":"/reference/posterior_probabilities_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"","code":"posterior_probabilities_normal(data, pi, mat_T, means, sdev)"},{"path":"/reference/posterior_probabilities_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"data (numeric) normal data pi (numeric) prior probability states mat_T (matrix) transition probability matrix means (numeric) vector prior means sdev (numeric) prior standard deviation","code":""},{"path":"/reference/posterior_probabilities_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"List posterior probabilities (CORRECTED)","code":""},{"path":"/reference/posterior_probabilities_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"details calculation made","code":""},{"path":"/reference/posterior_probabilities_normal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"references","code":""},{"path":"/reference/posterior_probabilities_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"","code":"prior_mat <- rbind(c(1-0.05, 0.05, 0),                   c(0.05, 1-0.1, 0.05),                   c(0, 0.05, 1-0.05))  prior_means <- c(-0.1, 0.0, 0.1) prior_sd  <- sqrt(0.1) L <- 100  # Simulate HMM model based on normal data based on prior information sim_data_normal <- hmm_simulate_normal_data(L = L,                                             mat_T = prior_mat,                                             means = prior_means,                                             sigma = prior_sd) pi <- sim_data_normal$pi # pi <- get_pi(prior_mat) hmm_norm_data <- sim_data_normal$data  # Calculate posterior probabilities of hidden states post_prob <-  posterior_probabilities_normal(data = hmm_norm_data,                                              pi = pi,                                              mat_T = prior_mat,                                              means = prior_means,                                              sdev = prior_sd)"},{"path":"/reference/posterior_probabilities_poisgamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"Forward-backward algorithm calculate posterior probabilities hidden states Poisson-Gamma model.","code":""},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"","code":"posterior_probabilities_poisgamma(data, pi, mat_T, betas, alpha)"},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"data (numeric) Poisson data pi (numeric) prior probability states mat_T (matrix) transition probability matrix betas (numeric) vector prior rates alpha (numeric) prior scale","code":""},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"List posterior probabilities (CORRECTED)","code":""},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"details calculation made","code":""},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"references","code":""},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"","code":"mat_T <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) L <- 2^10 betas <- c(0.1, 0.3, 0.5) alpha <- 1  sim_data <- hmm_simulate_poisgamma_data(L = L,                                         mat_T = mat_T,                                         betas = betas,                                         alpha = alpha) pi <- sim_data$pi hmm_poison_data <- sim_data$data hist(hmm_poison_data, breaks = 100)   # Calculate posterior probabilities of hidden states post_prob <-  posterior_probabilities_poisgamma(data = hmm_poison_data,                                                 pi = pi,                                                 mat_T = mat_T,                                                 betas = betas,                                                 alpha = alpha)"},{"path":"/news/index.html","id":"ohmmed-101","dir":"Changelog","previous_headings":"","what":"oHMMed 1.0.1","title":"oHMMed 1.0.1","text":"CRAN release: 2023-11-19 Fixed issue graph generated conf_mat() specifically Debian Fedora systems. graph rendering correctly.","code":""},{"path":"/news/index.html","id":"ohmmed-100","dir":"Changelog","previous_headings":"","what":"oHMMed 1.0.0","title":"oHMMed 1.0.0","text":"CRAN release: 2023-07-05 Initial release","code":""}]
