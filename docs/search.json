[{"path":"/INDEX.html","id":"id_1-overview","dir":"","previous_headings":"","what":"1. Overview","title":"Hidden Markov Models with ordered hidden states \n    and emission densities with applications in population genetics","text":"oHMMed package contains implementation Hidden Markov Models ordered hidden states emission densities. precisely: assume sequence un-observable (’hidden’) variables discrete categories known states. Moving along sequence, probability specific state occurring step depends state preceding . hidden variable along sequence produces/’emits’ observable data point. assume emitted data points distributed according continuous distribution (currently: normal gamma-poisson compound) state-specific parameters. , assume continuous emission distributions per state parametrised can ordered increasing mean. fact, transitions states hidden sequence can occur states emit densities neighbours ordering mean. Given observed data sequence, models assign part hidden sequence state, infer transition rates well parameters state-specific emission distributions. general framework oHMMed (ordered Hidden Markov Model emission densities), can applied system fulfils assumptions.","code":""},{"path":"/INDEX.html","id":"id_2-installation","dir":"","previous_headings":"","what":"2. Installation","title":"Hidden Markov Models with ordered hidden states \n    and emission densities with applications in population genetics","text":"oHMMed package currently development can installed github repository simply executing console following line:","code":"devtools::install_github(\"LynetteCaitlin/oHMMed\")"},{"path":"/INDEX.html","id":"id_3-usage-recommendations","dir":"","previous_headings":"","what":"3. Usage Recommendations","title":"Hidden Markov Models with ordered hidden states \n    and emission densities with applications in population genetics","text":"Usage recommendations can found file.","code":""},{"path":[]},{"path":"/articles/oHMMed.html","id":"example-data","dir":"Articles","previous_headings":"Normal model","what":"Example data","title":"","text":"","code":"N <- 2^10 true_T <- rbind(c(0.95, 0.05, 0),                c(0.025, 0.95, 0.025),                c(0.0, 0.05, 0.95))  true_means <- c(-5, 0, 5) true_sd <- 1.5  simdata_full <- hmm_simulate_normal_data(L = N,                                         mat_T = true_T,                                         means = true_means,                                         sigma = true_sd) simdata <- simdata_full$data plot(density(simdata), main = \"\")"},{"path":"/articles/oHMMed.html","id":"simulation","dir":"Articles","previous_headings":"Normal model","what":"Simulation","title":"","text":"","code":"# Set priors n_states_inferred <- 3 prior_T <- generate_random_T(n_states_inferred) prior_means <- c(-7, -1, 12) prior_sd <- 3  # Run MCMC res_normal <- hmm_mcmc_normal(data = simdata,                               prior_T = prior_T,                               prior_means = prior_means,                               prior_sd = prior_sd,                               iter = 1500,                               print_params = FALSE,                               verbose = FALSE) res_normal #> Model: HMM Normal  #> Type: MCMC  #> Iter: 1500  #> Warmup: 300  #> Thin: 1  #> States: 3  summary_res_normal <- summary(res_normal) #> Estimated means: #>    mean[1]    mean[2]    mean[3]  #> -4.9488931 -0.1122093  5.0463459  #>  #> Estimated sd: #> 1.482213 #>  #> Estimated transition rates: #>            1          2          3 #> 1 0.93750880 0.06249120 0.00000000 #> 2 0.02350138 0.95463953 0.02185909 #> 3 0.00000000 0.03754865 0.96245135 #>  #> Assigned states: #>   1   2   3  #> 196 524 304  #>  #> Approximate Kullback-Leibler divergence: #> 0.004917547 #>  #> Log Likelihood: #>         mean           sd       median  #> -2036.726273     1.838977 -2036.423079"},{"path":"/articles/oHMMed.html","id":"diagnostics","dir":"Articles","previous_headings":"Normal model","what":"Diagnostics","title":"","text":"","code":"plot(res_normal)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lynette Caitlin Mikula. Author. Claus Vogl. Author. Michal Majka. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mikula LC, Vogl C, Majka M (2023). oHMMed: Hidden Markov Models ordered hidden states emission densities applications population genetics. https://github.com/LynetteCaitlin/oHMMed, https://lynettecaitlin.github.io/oHMMed/.","code":"@Manual{,   title = {oHMMed: Hidden Markov Models with ordered hidden states and emission densities with applications in population genetics},   author = {Lynette Caitlin Mikula and Claus Vogl and Michal Majka},   year = {2023},   note = {https://github.com/LynetteCaitlin/oHMMed, https://lynettecaitlin.github.io/oHMMed/}, }"},{"path":"/reference/coef.hmm_mcmc_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract model estimates — coef.hmm_mcmc_normal","title":"Extract model estimates — coef.hmm_mcmc_normal","text":"coef generic function extracts model estimates mcmc_hmm_* objects","code":""},{"path":"/reference/coef.hmm_mcmc_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract model estimates — coef.hmm_mcmc_normal","text":"","code":"# S3 method for hmm_mcmc_normal coef(object, ...)  # S3 method for hmm_mcmc_gamma_poisson coef(object, ...)"},{"path":"/reference/coef.hmm_mcmc_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract model estimates — coef.hmm_mcmc_normal","text":"object object class inheriting \"mcmc_hmm_*\" ... used","code":""},{"path":"/reference/coef.hmm_mcmc_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract model estimates — coef.hmm_mcmc_normal","text":"Estimates extracted MCMC HMM objects","code":""},{"path":"/reference/coef.hmm_mcmc_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract model estimates — coef.hmm_mcmc_normal","text":"","code":"coef(example_hmm_mcmc_normal) #> $means #>   mean[1]   mean[2]   mean[3]  #> 0.5369810 0.9979305 1.9027594  #>  #> $sd #> [1] 0.1965586 #>  #> $mat_T #>           [,1]      [,2]      [,3] #> [1,] 0.6885175 0.3114825 0.0000000 #> [2,] 0.3092334 0.5960992 0.0946674 #> [3,] 0.0000000 0.3293142 0.6706858 #>  coef(example_hmm_mcmc_gamma_poisson) #> $betas #>   beta[1]   beta[2]   beta[3]  #> 5.2096058 0.6879512 0.1142097  #>  #> $alpha #> [1] 1.330082 #>  #> $means #>  means[1]  means[2]  means[3]  #>  0.255653  1.934803 11.649450  #>  #> $mat_T #>            [,1]        [,2]       [,3] #> [1,] 0.99218691 0.007813094 0.00000000 #> [2,] 0.01321056 0.975000900 0.01178854 #> [3,] 0.00000000 0.008698770 0.99130123 #>"},{"path":"/reference/conf_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a confusion matrix...DESCRIPTION TO BE IMPROVED — conf_mat","title":"Calculate a confusion matrix...DESCRIPTION TO BE IMPROVED — conf_mat","text":"diagnostic function tests reliability estimation procedures given inferred transition rates","code":""},{"path":"/reference/conf_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a confusion matrix...DESCRIPTION TO BE IMPROVED — conf_mat","text":"","code":"conf_mat(N, res, plot = TRUE)"},{"path":"/reference/conf_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a confusion matrix...DESCRIPTION TO BE IMPROVED — conf_mat","text":"N (numeric) number simulations res (mcmc_hmm_\\*) simulated MCMC HMM model plot (logical) plot confusion matrix. default TRUE","code":""},{"path":"/reference/conf_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a confusion matrix...DESCRIPTION TO BE IMPROVED — conf_mat","text":"Confusion matrix: confusion_matrix","code":""},{"path":"/reference/conf_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a confusion matrix...DESCRIPTION TO BE IMPROVED — conf_mat","text":"First data simulated given inferred model parameters transition rates. posterior probabilities calculated states inferred. Finally, inferred states simulated states compared via confusion_matrix function.","code":""},{"path":"/reference/conf_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a confusion matrix...DESCRIPTION TO BE IMPROVED — conf_mat","text":"","code":"res <- conf_mat(100, example_hmm_mcmc_normal, plot = TRUE) res #> # A tibble: 1 × 15 #>   Confusion …¹ Table      Class …² Overa…³ Balan…⁴    F1 Sensi…⁵ Speci…⁶ Pos P…⁷ #>   <list>       <list>     <list>     <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl> #> 1 <tibble>     <table[…]> <tibble>    0.86   0.908 0.896   0.899   0.917   0.899 #> # … with 6 more variables: `Neg Pred Value` <dbl>, Kappa <dbl>, MCC <dbl>, #> #   `Detection Rate` <dbl>, `Detection Prevalence` <dbl>, Prevalence <dbl>, and #> #   abbreviated variable names ¹​`Confusion Matrix`, ²​`Class Level Results`, #> #   ³​`Overall Accuracy`, ⁴​`Balanced Accuracy`, ⁵​Sensitivity, ⁶​Specificity, #> #   ⁷​`Pos Pred Value`"},{"path":"/reference/convert_to_ggmcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts MCMC samples into ggmcmc format — convert_to_ggmcmc","title":"Converts MCMC samples into ggmcmc format — convert_to_ggmcmc","text":"helper function converts MCMC samples ggmcmc format","code":""},{"path":"/reference/convert_to_ggmcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts MCMC samples into ggmcmc format — convert_to_ggmcmc","text":"","code":"convert_to_ggmcmc(   x,   pattern = c(\"mean\", \"sigma\", \"beta\", \"alpha\", \"pois_means\", \"T\"),   include_warmup = FALSE )"},{"path":"/reference/convert_to_ggmcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts MCMC samples into ggmcmc format — convert_to_ggmcmc","text":"x (mcmc_hmm_*) MCMC HMM object pattern (character) pattern(s) model parameters included output include_warmup (logical) include warmup samples. default FALSE","code":""},{"path":"/reference/convert_to_ggmcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts MCMC samples into ggmcmc format — convert_to_ggmcmc","text":"data.frame compatible functions ggmcmc package","code":""},{"path":"/reference/convert_to_ggmcmc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converts MCMC samples into ggmcmc format — convert_to_ggmcmc","text":"default, given model, parameters converted ggmcmc format. parameter pattern can used extract specific parameters. instance pattern=\"mean\" extracts mean parameters  hmm_mcmc_normal model. specific parameter interest can matched exact name: pattern=c(\"mean[1]\", \"T[1,1]\").","code":""},{"path":"/reference/convert_to_ggmcmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts MCMC samples into ggmcmc format — convert_to_ggmcmc","text":"","code":"# Convert all parameters (Normal model) convert_normal_all <- convert_to_ggmcmc(example_hmm_mcmc_normal) unique(convert_normal_all$Parameter) #>  [1] \"mean[1]\"  \"mean[2]\"  \"mean[3]\"  \"sigma[1]\" \"T[1,1]\"   \"T[2,1]\"   #>  [7] \"T[3,1]\"   \"T[1,2]\"   \"T[2,2]\"   \"T[3,2]\"   \"T[1,3]\"   \"T[2,3]\"   #> [13] \"T[3,3]\"   head(convert_normal_all) #>   Iteration Chain Parameter     value #> 1       601     1   mean[1] 0.5354983 #> 2       602     1   mean[1] 0.5377846 #> 3       603     1   mean[1] 0.5345940 #> 4       604     1   mean[1] 0.5368107 #> 5       605     1   mean[1] 0.5309021 #> 6       606     1   mean[1] 0.5362083 tail(convert_normal_all) #>       Iteration Chain Parameter     value #> 11695      1495     1    T[3,3] 0.6883719 #> 11696      1496     1    T[3,3] 0.6852965 #> 11697      1497     1    T[3,3] 0.6493503 #> 11698      1498     1    T[3,3] 0.6501431 #> 11699      1499     1    T[3,3] 0.6727866 #> 11700      1500     1    T[3,3] 0.6573192  # Convert only means (Normal model) convert_normal_means <- convert_to_ggmcmc(example_hmm_mcmc_normal,                                            pattern = \"mean\") unique(convert_normal_means$Parameter) #> [1] \"mean[1]\" \"mean[2]\" \"mean[3]\"  # Convert selected parameter (Normal model) pattern_normal <- c(\"mean[1]\", \"sigma[1]\", \"T[1,1]\") convert_normal_param <- convert_to_ggmcmc(example_hmm_mcmc_normal,                                            pattern = pattern_normal) unique(convert_normal_param$Parameter) #> [1] \"mean[1]\"  \"sigma[1]\" \"T[1,1]\"    # Convert all parameters (Poisson-Gamma model) convert_pois_gamma_all <- convert_to_ggmcmc(example_hmm_mcmc_gamma_poisson) unique(convert_pois_gamma_all$Parameter) #>  [1] \"means[1]\" \"means[2]\" \"means[3]\" \"beta[1]\"  \"beta[2]\"  \"beta[3]\"  #>  [7] \"alpha[1]\" \"T[1,1]\"   \"T[2,1]\"   \"T[3,1]\"   \"T[1,2]\"   \"T[2,2]\"   #> [13] \"T[3,2]\"   \"T[1,3]\"   \"T[2,3]\"   \"T[3,3]\""},{"path":"/reference/eigen_system.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate eigenvalues and eigenvectors. — eigen_system","title":"Calculate eigenvalues and eigenvectors. — eigen_system","text":"helper function returns eigenvalues lambda left right eigenvectors forwards backwards.","code":""},{"path":"/reference/eigen_system.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate eigenvalues and eigenvectors. — eigen_system","text":"","code":"eigen_system(mat)"},{"path":"/reference/eigen_system.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate eigenvalues and eigenvectors. — eigen_system","text":"mat (matrix) square matrix","code":""},{"path":"/reference/eigen_system.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate eigenvalues and eigenvectors. — eigen_system","text":"list three elements: lambda: eigenvalues forwards: left eigenvector backwards: right eigenvector","code":""},{"path":"/reference/eigen_system.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate eigenvalues and eigenvectors. — eigen_system","text":"","code":"mat_T0 <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) eigen_system(mat_T0) #> $lambda #> [1] 1.00 0.99 0.97 #>  #> $forwards #>            [,1]          [,2]      [,3] #> [1,]  0.3333333  3.333333e-01 0.3333333 #> [2,] -0.3333333 -2.631640e-16 0.3333333 #> [3,]  0.2222222 -4.444444e-01 0.2222222 #>  #> $backwards #>      [,1]          [,2]  [,3] #> [1,]    1 -1.500000e+00  0.75 #> [2,]    1 -1.040834e-15 -1.50 #> [3,]    1  1.500000e+00  0.75 #>"},{"path":"/reference/example_hmm_mcmc_gamma_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_gamma_poisson","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_gamma_poisson","text":"Example Simulated Gamma-Poisson Model","code":""},{"path":"/reference/example_hmm_mcmc_gamma_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_gamma_poisson","text":"","code":"example_hmm_mcmc_gamma_poisson"},{"path":"/reference/example_hmm_mcmc_gamma_poisson.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_gamma_poisson","text":"hmm_mcmc_gamma_poisson object","code":""},{"path":"/reference/example_hmm_mcmc_gamma_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_gamma_poisson","text":"","code":"# Data stored in the object hist(example_hmm_mcmc_gamma_poisson$data,       breaks = 50, xlab = \"\", main = \"\")   # Priors used in simulation example_hmm_mcmc_gamma_poisson$priors #> $prior_betas #> [1] 5 3 1 #>  #> $prior_alpha #> [1] 0.938733 #>  #> $prior_T #>           [,1]      [,2]      [,3] #> [1,] 0.3224448 0.6775552 0.0000000 #> [2,] 0.2511339 0.2289642 0.5199018 #> [3,] 0.0000000 0.8103900 0.1896100 #>   # Model example_hmm_mcmc_gamma_poisson #> Model: HMM Gamma-Poisson  #> Type: MCMC  #> Iter: 1500  #> Warmup: 600  #> Thin: 1  #> States: 3   summary(example_hmm_mcmc_gamma_poisson) #> Estimated betas: #>   beta[1]   beta[2]   beta[3]  #> 5.2096058 0.6879512 0.1142097  #>  #> Estimated alpha: #> 1.330082 #>  #> Estimated means: #> 0.255653 1.934803 11.64945 #>  #> Estimated transition rates: #>            1           2          3 #> 1 0.99218691 0.007813094 0.00000000 #> 2 0.01321056 0.975000900 0.01178854 #> 3 0.00000000 0.008698770 0.99130123 #>  #> Assigned states: #>    1    2    3  #> 3438 2002 2752  #>  #> Approximate Kullback-Leibler divergence: #> 0.03944329 #>  #> Log Likelihood: #>         mean           sd       median  #> -15916.20821      1.66878 -15915.94677  #>  #> Significance of Difference between Rates (stepwise): #> [1] 0 0 #>"},{"path":"/reference/example_hmm_mcmc_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of a Simulated Normal Model — example_hmm_mcmc_normal","title":"Example of a Simulated Normal Model — example_hmm_mcmc_normal","text":"Example Simulated Normal Model","code":""},{"path":"/reference/example_hmm_mcmc_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of a Simulated Normal Model — example_hmm_mcmc_normal","text":"","code":"example_hmm_mcmc_normal"},{"path":"/reference/example_hmm_mcmc_normal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of a Simulated Normal Model — example_hmm_mcmc_normal","text":"hmm_mcmc_normal object","code":""},{"path":"/reference/example_hmm_mcmc_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of a Simulated Normal Model — example_hmm_mcmc_normal","text":"","code":"# Data stored in the object plot(density(example_hmm_mcmc_normal$data), main = \"\")   # Priors used in simulation example_hmm_mcmc_normal$priors #> $prior_means #> [1] 0.60 0.95 1.95 #>  #> $prior_sd #> [1] 0.1587495 #>  #> $prior_T #>            [,1]       [,2]      [,3] #> [1,] 0.28487917 0.71512083 0.0000000 #> [2,] 0.07365809 0.57202754 0.3543144 #> [3,] 0.00000000 0.08493386 0.9150661 #>   # Model example_hmm_mcmc_normal #> Model: HMM Normal  #> Type: MCMC  #> Iter: 1500  #> Warmup: 600  #> Thin: 1  #> States: 3   summary(example_hmm_mcmc_normal) #> Estimated means: #>   mean[1]   mean[2]   mean[3]  #> 0.5369810 0.9979305 1.9027594  #>  #> Estimated sd: #> 0.1965586 #>  #> Estimated transition rates: #>           1         2         3 #> 1 0.6885175 0.3114825 0.0000000 #> 2 0.3092334 0.5960992 0.0946674 #> 3 0.0000000 0.3293142 0.6706858 #>  #> Assigned states: #>    1    2    3  #> 3588 3572 1032  #>  #> Approximate Kullback-Leibler divergence: #> -0.002005393 #>  #> Log Likelihood: #>         mean           sd       median  #> -2721.728702     1.667153 -2721.459216  #>"},{"path":"/reference/example_hmm_mcmc_pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_pois","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_pois","text":"Example Simulated Gamma-Poisson Model","code":""},{"path":"/reference/example_hmm_mcmc_pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_pois","text":"","code":"data(example_hmm_mcmc_pois)"},{"path":"/reference/example_hmm_mcmc_pois.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_pois","text":"hmm_mcmc_poisson object","code":""},{"path":"/reference/example_hmm_mcmc_pois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example of a Simulated Gamma-Poisson Model — example_hmm_mcmc_pois","text":"","code":"# Data hist(example_hmm_mcmc_pois$data, breaks = 50, xlab = \"\", main = \"\")   # Priors example_hmm_mcmc_pois$priors #> $prior_betas #> [1] 5 3 1 #>  #> $prior_alpha #> [1] 1.410104 #>  #> $prior_T #>           [,1]      [,2]      [,3] #> [1,] 0.2804014 0.7195986 0.0000000 #> [2,] 0.0964973 0.3146985 0.5888042 #> [3,] 0.0000000 0.4415601 0.5584399 #>   # Model example_hmm_mcmc_pois #> Model: HMM Poisson-Gamma  #> Type: MCMC  #> Iter: 2000  #> Warmup: 800  #> Thin: 1  #> States: 3  summary(example_hmm_mcmc_pois) #> Estimated betas: #>   beta[1]   beta[2]   beta[3]  #> 5.4481574 0.6566282 0.1122534  #>  #> Estimated alpha: #> 1.330606 #>  #> Estimated means: #> 0.2446946 2.028259 11.85617 #>  #> Estimated transition rates: #>            1           2          3 #> 1 0.99107833 0.008921666 0.00000000 #> 2 0.01309276 0.967353793 0.01955345 #> 3 0.00000000 0.008808412 0.99119159 #>  #> Assigned states: #>    1    2    3  #> 2558 1756 3878  #>  #> Approximate Kullback-Leibler divergence: #> 0.02809406 #>  #> Log Likelihood: #>         mean           sd       median  #> -18918.09690      1.65408 -18917.81980  #>  #> Significance of Difference between Rates (stepwise): #> [1] 0 0 #>"},{"path":"/reference/generate_random_T.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a random transition matrix — generate_random_T","title":"Generate a random transition matrix — generate_random_T","text":"helper function generates transition matrix random testing purposes","code":""},{"path":"/reference/generate_random_T.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a random transition matrix — generate_random_T","text":"","code":"generate_random_T(n = 3)"},{"path":"/reference/generate_random_T.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a random transition matrix — generate_random_T","text":"n (integer) dimension transition matrix","code":""},{"path":"/reference/generate_random_T.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a random transition matrix — generate_random_T","text":"random n x n transition matrix","code":""},{"path":"/reference/generate_random_T.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a random transition matrix — generate_random_T","text":"Uniform random numbers \\([0,1]\\) used fill matrix. Rows normalized.","code":""},{"path":"/reference/generate_random_T.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a random transition matrix — generate_random_T","text":"","code":"mat_T <- generate_random_T(3) mat_T #>           [,1]      [,2]      [,3] #> [1,] 0.4532311 0.5467689 0.0000000 #> [2,] 0.4018990 0.2042118 0.3938892 #> [3,] 0.0000000 0.6458310 0.3541690 rowSums(mat_T) #> [1] 1 1 1"},{"path":"/reference/get_pi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the prior probability of states — get_pi","title":"Get the prior probability of states — get_pi","text":"Calculate prior probability states correspond stationary distribution transition matrix T","code":""},{"path":"/reference/get_pi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the prior probability of states — get_pi","text":"","code":"get_pi(mat_T = NULL)"},{"path":"/reference/get_pi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the prior probability of states — get_pi","text":"mat_T (matrix) transition matrix","code":""},{"path":"/reference/get_pi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the prior probability of states — get_pi","text":"numeric vector","code":""},{"path":"/reference/get_pi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the prior probability of states — get_pi","text":"assumed prior probability states corresponds stationary distribution transition matrix \\(T\\), denoted \\(\\pi\\) entries \\(\\pi_i=Pr(\\theta_{l-1}=)\\).","code":""},{"path":"/reference/get_pi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the prior probability of states — get_pi","text":"","code":"T_mat <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) T_mat #>      [,1] [,2] [,3] #> [1,] 0.99 0.01 0.00 #> [2,] 0.01 0.98 0.01 #> [3,] 0.00 0.01 0.99 get_pi(T_mat) #> [1] 0.3333333 0.3333333 0.3333333"},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC simulation of a Hidden Markov Normal Model for Gamma-Poisson model — hmm_mcmc_gamma_poisson","title":"MCMC simulation of a Hidden Markov Normal Model for Gamma-Poisson model — hmm_mcmc_gamma_poisson","text":"MCMC simulation Hidden Markov Normal Model Gamma-Poisson model","code":""},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC simulation of a Hidden Markov Normal Model for Gamma-Poisson model — hmm_mcmc_gamma_poisson","text":"","code":"hmm_mcmc_gamma_poisson(   data,   prior_T,   prior_betas,   prior_alpha = 1,   iter = 1500,   warmup = floor(iter/1.5),   thin = 1,   seed = sample.int(.Machine$integer.max, 1),   init_T = NULL,   init_betas = NULL,   init_alpha = NULL,   print_params = TRUE,   verbose = TRUE )"},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC simulation of a Hidden Markov Normal Model for Gamma-Poisson model — hmm_mcmc_gamma_poisson","text":"data (numeric) data prior_T (matrix) prior transition matrix prior_betas (numeric) prior beta parameters prior_alpha (numeric) single prior alpha parameter. default, prior_alpha=1 iter (integer) number MCMC iterations warmup (integer) number warmup iterations thin (integer) thinning parameter. default, 1 seed (integer) seed parameter init_T (matrix) optional parameter; initial transition matrix init_betas (numeric) optional parameter; initial beta parameters init_alpha (numeric) optional parameter; initial alpha parameter print_params (logical) optional parameter; print estimated parameters every iteration. default, TRUE verbose (logical) optional parameter; print additional messages. default, TRUE","code":""},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC simulation of a Hidden Markov Normal Model for Gamma-Poisson model — hmm_mcmc_gamma_poisson","text":"List following elements: data: data used simulation samples: list samples estimates: list various estimates idx: indices iterations warmup period priors: prior parameters inits: initial parameters last_iter: list samples last MCMC iteration info: list various meta information object","code":""},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC simulation of a Hidden Markov Normal Model for Gamma-Poisson model — hmm_mcmc_gamma_poisson","text":"TODO: details","code":""},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MCMC simulation of a Hidden Markov Normal Model for Gamma-Poisson model — hmm_mcmc_gamma_poisson","text":"TODO: references","code":""},{"path":"/reference/hmm_mcmc_gamma_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC simulation of a Hidden Markov Normal Model for Gamma-Poisson model — hmm_mcmc_gamma_poisson","text":"","code":"# Simulate Poisson-Gamma data N <- 2^10 true_T <- rbind(c(0.95, 0.05, 0),                 c(0.025, 0.95, 0.025),                 c(0.0, 0.05, 0.95))  true_betas <- c(2, 1, 0.1) true_alpha <- 1  simdata_full <- hmm_simulate_gamma_poisson_data(L = N,                                                 mat_T = true_T,                                                 betas = true_betas,                                                 alpha = true_alpha) simdata <- simdata_full$data hist(simdata, breaks = 40, probability = TRUE,        main = \"Distribution of the simulated Poisson-Gamma data\") lines(density(simdata), col = \"red\")   # Set numbers of states to be inferred n_states_inferred <- 3  # Set priors prior_T <- generate_random_T(n_states_inferred) prior_betas <- c(1, 0.5, 0.1) prior_alpha <- 3  # Simmulation settings iter <- 50 warmup <- floor(iter / 5) # 20 percent thin <- 1 seed <- sample.int(10000, 1) print_params <- FALSE # if TRUE then parameters are printed in each iteration verbose <- FALSE # if TRUE then the state of the simulation is printed  # Run MCMC sampler res <- hmm_mcmc_gamma_poisson(data = simdata,                               prior_T = prior_T,                               prior_betas = prior_betas,                               prior_alpha = prior_alpha,                               iter = iter,                               warmup = warmup,                                 thin = thin,                               seed = seed,                               print_params = print_params,                               verbose = verbose) res #> Model: HMM Gamma-Poisson  #> Type: MCMC  #> Iter: 50  #> Warmup: 10  #> Thin: 1  #> States: 3   summary(res)# summary output can be also assigned to a variable #> Estimated betas: #>   beta[1]   beta[2]   beta[3]  #> 1.5610750 1.0982282 0.1190703  #>  #> Estimated alpha: #> 1.585931 #>  #> Estimated means: #> 1.019932 1.460873 13.35091 #>  #> Estimated transition rates: #>           1           2         3 #> 1 0.9738144 0.026185611 0.0000000 #> 2 0.2040378 0.003730951 0.7922312 #> 3 0.0000000 0.321356266 0.6786437 #>  #> Assigned states: #>   1   2   3  #> 724  81 219  #>  #> Approximate Kullback-Leibler divergence: #> 0.2797352 #>  #> Log Likelihood: #>         mean           sd       median  #> -2121.581307     2.741672 -2120.720638  #>  #> Significance of Difference between Rates (stepwise): #> [1]  5.360041e-01 1.157160e-300 #>   coef(res) # extract model estimates #> $betas #>   beta[1]   beta[2]   beta[3]  #> 1.5610750 1.0982282 0.1190703  #>  #> $alpha #> [1] 1.585931 #>  #> $means #>  means[1]  means[2]  means[3]  #>  1.019932  1.460873 13.350915  #>  #> $mat_T #>           [,1]        [,2]      [,3] #> [1,] 0.9738144 0.026185611 0.0000000 #> [2,] 0.2040378 0.003730951 0.7922312 #> [3,] 0.0000000 0.321356266 0.6786437 #>   # plot(res) # MCMC diagnostics"},{"path":"/reference/hmm_mcmc_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC simulation of a Hidden Markov Normal Model — hmm_mcmc_normal","title":"MCMC simulation of a Hidden Markov Normal Model — hmm_mcmc_normal","text":"MCMC simulation Hidden Markov Normal Model","code":""},{"path":"/reference/hmm_mcmc_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC simulation of a Hidden Markov Normal Model — hmm_mcmc_normal","text":"","code":"hmm_mcmc_normal(   data,   prior_T,   prior_means,   prior_sd,   iter = 600,   warmup = floor(iter/5),   thin = 1,   seed = sample.int(.Machine$integer.max, 1),   init_T = NULL,   init_means = NULL,   init_sd = NULL,   print_params = TRUE,   verbose = TRUE )"},{"path":"/reference/hmm_mcmc_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC simulation of a Hidden Markov Normal Model — hmm_mcmc_normal","text":"data (numeric) normal data prior_T (matrix) prior transition matrix prior_means (numeric) prior means prior_sd (numeric) single prior standard devation iter (integer) number MCMC iterations warmup (integer) number warmup iterations thin (integer) thinning parameter. default, 1 seed (integer) seed parameter init_T (matrix) optional parameter; initial transition matrix init_means (numeric) optional parameter; initial means init_sd (numeric) optional parameter; initial standard deviation print_params (logical) optional parameter; print parameters every iteration. default, TRUE verbose (logical) optional parameter; print additional messages. default, TRUE","code":""},{"path":"/reference/hmm_mcmc_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC simulation of a Hidden Markov Normal Model — hmm_mcmc_normal","text":"List following elements: data: data used simulation samples: list samples estimates: list various estimates idx: indices iterations warmup period priors: prior parameters inits: initial parameters last_iter: list samples last MCMC iteration info: list various meta information object","code":""},{"path":"/reference/hmm_mcmc_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC simulation of a Hidden Markov Normal Model — hmm_mcmc_normal","text":"TODO: details","code":""},{"path":"/reference/hmm_mcmc_normal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MCMC simulation of a Hidden Markov Normal Model — hmm_mcmc_normal","text":"TODO: references","code":""},{"path":"/reference/hmm_mcmc_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC simulation of a Hidden Markov Normal Model — hmm_mcmc_normal","text":"","code":"# Simulate normal data N <- 2^10 true_T <- rbind(c(0.95, 0.05, 0),                 c(0.025, 0.95, 0.025),                 c(0.0, 0.05, 0.95))  true_means <- c(-5, 0, 5) true_sd <- 1.5  simdata_full <- hmm_simulate_normal_data(L = N,                                           mat_T = true_T,                                           means = true_means,                                          sigma = true_sd) simdata <- simdata_full$data hist(simdata, breaks = 40, probability = TRUE,        main = \"Distribution of the simulated normal data\") lines(density(simdata), col = \"red\")   # Set numbers of states to be inferred n_states_inferred <- 3  # Set priors prior_T <- generate_random_T(n_states_inferred) prior_means <- c(-18, -1, 12) prior_sd <- 3  # Simmulation settings iter <- 50 warmup <- floor(iter / 5) # 20 percent thin <- 1 seed <- sample.int(10000, 1) print_params <- FALSE # if TRUE then parameters are printed in each iteration verbose <- FALSE # if TRUE then the state of the simulation is printed  # Run MCMC sampler res <- hmm_mcmc_normal(data = simdata,                        prior_T = prior_T,                        prior_means = prior_means,                        prior_sd = prior_sd,                        iter = iter,                        warmup = warmup,                        seed = seed,                        print_params = print_params,                        verbose = verbose) res #> Model: HMM Normal  #> Type: MCMC  #> Iter: 50  #> Warmup: 10  #> Thin: 1  #> States: 3   summary(res) # summary output can be also assigned to a variable #> Estimated means: #>    mean[1]    mean[2]    mean[3]  #> -18.557142  -2.174773   4.570874  #>  #> Estimated sd: #> 2.76132 #>  #> Estimated transition rates: #>              1          2          3 #> 1 0.3413454951 0.65865450 0.00000000 #> 2 0.0001655483 0.98552866 0.01430579 #> 3 0.0000000000 0.05507365 0.94492635 #>  #> Assigned states: #>   1   2   3  #>   0 820 204  #>  #> Approximate Kullback-Leibler divergence: #> 0.01502494 #>  #> Log Likelihood: #>        mean          sd      median  #> -2564.51253     1.20883 -2564.01820  #>   coef(res) # extract model estimates #> $means #>    mean[1]    mean[2]    mean[3]  #> -18.557142  -2.174773   4.570874  #>  #> $sd #> [1] 2.76132 #>  #> $mat_T #>              [,1]       [,2]       [,3] #> [1,] 0.3413454951 0.65865450 0.00000000 #> [2,] 0.0001655483 0.98552866 0.01430579 #> [3,] 0.0000000000 0.05507365 0.94492635 #>   # plot(res) # MCMC diagnostics"},{"path":"/reference/hmm_mcmc_pois.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"MCMC simulation Hidden Markov Normal Model Poisson model","code":""},{"path":"/reference/hmm_mcmc_pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"","code":"hmm_mcmc_pois(   data,   prior_T,   prior_betas,   prior_alpha = 1,   iter = 1500,   warmup = floor(iter/1.5),   thin = 1,   seed = sample.int(.Machine$integer.max, 1),   init_T = NULL,   init_betas = NULL,   init_alpha = NULL,   print_params = TRUE,   verbose = TRUE )"},{"path":"/reference/hmm_mcmc_pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"data (numeric) data prior_T (matrix) prior transition matrix prior_betas (numeric) prior beta parameters prior_alpha (numeric) single prior alpha parameter. default, prior_alpha=1 iter (integer) number MCMC iterations warmup (integer) number warmup iterations thin (integer) thinning parameter. default, 1 seed (integer) seed parameter init_T (matrix) optional parameter; initial transition matrix init_betas (numeric) optional parameter; initial beta parameters init_alpha (numeric) optional parameter; initial alpha parameter print_params (logical) optional parameter; print estimated parameters every iteration. default, TRUE verbose (logical) optional parameter; print additional messages. default, TRUE","code":""},{"path":"/reference/hmm_mcmc_pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"List following elements: data: data used simulation samples: list samples estimates: list various estimates idx: indices iterations warmup period priors: prior parameters inits: initial parameters last_iter: list samples last MCMC iteration info: list various meta information object","code":""},{"path":"/reference/hmm_mcmc_pois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"details","code":""},{"path":"/reference/hmm_mcmc_pois.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"references","code":""},{"path":"/reference/hmm_mcmc_pois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC simulation of a Hidden Markov Normal Model for Poisson model — hmm_mcmc_pois","text":"","code":"# Simulate Poisson-Gamma data N <- 2^10 true_T <- rbind(c(0.95, 0.05, 0),                 c(0.025, 0.95, 0.025),                 c(0.0, 0.05, 0.95))  true_betas <- c(2, 1, 0.1) true_alpha <- 1  simdata_full <- hmm_simulate_poisgamma_data(L = N,                                             mat_T = true_T,                                             betas = true_betas,                                             alpha = true_alpha) simdata <- simdata_full$data hist(simdata, breaks = 40, probability = TRUE,        main = \"Distribution of the simulated Poisson-Gamma data\") lines(density(simdata), col = \"red\")   # Set numbers of states to be inferred n_states_inferred <- 3  # Set priors prior_T <- generate_random_T(n_states_inferred) prior_betas <- c(1, 0.5, 0.1) prior_alpha <- 3  # Simmulation settings iter <- 50 warmup <- floor(iter / 5) # 20 percent thin <- 1 seed <- sample.int(10000, 1) print_params <- FALSE # if TRUE then parameters are printed in each iteration verbose <- FALSE # if TRUE then the state of the simulation is printed  # Run MCMC sampler res <- hmm_mcmc_pois(data = simdata,                      prior_T = prior_T,                      prior_betas = prior_betas,                      prior_alpha = prior_alpha,                      iter = iter,                      warmup = warmup,                        thin = thin,                      seed = seed,                      print_params = print_params,                      verbose = verbose) res #> Model: HMM Poisson-Gamma  #> Type: MCMC  #> Iter: 50  #> Warmup: 10  #> Thin: 1  #> States: 3   summary(res)# summary output can be also assigned to a variable #> Estimated betas: #>   beta[1]   beta[2]   beta[3]  #> 1.3668561 0.1251987 0.0746723  #>  #> Estimated alpha: #> 0.9575238 #>  #> Estimated means: #> 0.7023229 7.847835 13.10924 #>  #> Estimated transition rates: #>            1          2         3 #> 1 0.98198977 0.01801023 0.0000000 #> 2 0.07110897 0.58903919 0.3398518 #> 3 0.00000000 0.64663491 0.3533651 #>  #> Assigned states: #>   1   2   3  #> 748 223  53  #>  #> Approximate Kullback-Leibler divergence: #> 0.2919717 #>  #> Log Likelihood: #>         mean           sd       median  #> -1878.521333     1.193999 -1878.443050  #>  #> Significance of Difference between Rates (stepwise): #> [1]  0.000000e+00 6.263565e-252 #>   coef(res) # extract model estimates #> $betas #>   beta[1]   beta[2]   beta[3]  #> 1.3668561 0.1251987 0.0746723  #>  #> $alpha #> [1] 0.9575238 #>  #> $means #>   means[1]   means[2]   means[3]  #>  0.7023229  7.8478351 13.1092414  #>  #> $mat_T #>            [,1]       [,2]      [,3] #> [1,] 0.98198977 0.01801023 0.0000000 #> [2,] 0.07110897 0.58903919 0.3398518 #> [3,] 0.00000000 0.64663491 0.3533651 #>   # plot(res) # MCMC diagnostics"},{"path":"/reference/hmm_simulate_gamma_poisson_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data based on a Gamma-Poisson Model for a Hidden Markov Model simulation — hmm_simulate_gamma_poisson_data","title":"Simulate data based on a Gamma-Poisson Model for a Hidden Markov Model simulation — hmm_simulate_gamma_poisson_data","text":"Simulate data based Gamma-Poisson Model Hidden Markov Model simulation","code":""},{"path":"/reference/hmm_simulate_gamma_poisson_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data based on a Gamma-Poisson Model for a Hidden Markov Model simulation — hmm_simulate_gamma_poisson_data","text":"","code":"hmm_simulate_gamma_poisson_data(L, mat_T, betas, alpha)"},{"path":"/reference/hmm_simulate_gamma_poisson_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data based on a Gamma-Poisson Model for a Hidden Markov Model simulation — hmm_simulate_gamma_poisson_data","text":"L (integer) number simulations mat_T (matrix) square matrix initial state betas (numeric) rate parameter rgamma emission probabilities alpha (numeric) shape parameter rgamma emission probabilities","code":""},{"path":"/reference/hmm_simulate_gamma_poisson_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data based on a Gamma-Poisson Model for a Hidden Markov Model simulation — hmm_simulate_gamma_poisson_data","text":"Returns data vector \"data\", \"true\" hidden states \"states\" used generate data vector prior probability states \"pi\".","code":""},{"path":"/reference/hmm_simulate_gamma_poisson_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data based on a Gamma-Poisson Model for a Hidden Markov Model simulation — hmm_simulate_gamma_poisson_data","text":"","code":"mat_T <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) L <- 2^10 betas <- c(0.1, 0.3, 0.5) alpha <- 1  sim_data <- hmm_simulate_gamma_poisson_data(L = L,                                             mat_T = mat_T,                                             betas = betas,                                             alpha = alpha) hist(sim_data$data, breaks = 100, main = \"Histogram\")  sim_data #> $data #>    [1] 40 20 20  6  5  1  0  0  9 44  8  1  5  7  3 24 12  3  1 20  6  0 46  5 #>   [25] 52  1  6 15 15  2  8  1  3  7 13  0  2 10  1  2  6  4 21  8  2  3  7  5 #>   [49] 11 22  6  1 18  5 19 14  8  4  0 20  2  8  1  6  2  0  8  6  0  4  1 15 #>   [73]  6  1  1  1  5  2  3  3  2  0  0  2  0  0  1  2  1  0  5  7  0  0  4  5 #>   [97]  1  2  8  2  3  0  1  2  0  2  0  0  3  2  1  3  3  2  6  0  0  1  0  4 #>  [121]  7  4  1  1  7  0  3  3  0  0  0  1  6  1  0  2  1  2  0  2  3  0  1  5 #>  [145]  3  0  6  3  5  0  8  0  0  0  1  3  0  6  1  0  0  3  0  2  1 17  0  0 #>  [169]  3  0  2  0  1  0  0  0  0  0  1  1  1  4  1  1  1  0  0  1  2  1  1  1 #>  [193]  1  1  2  1  2  4  8  0  0  3  5  0  1  7 11  1  0  1  5  3  0  0  3  0 #>  [217]  0  3  4  9  3  0  7  0  0  3  0  6  0  1  1  5  1  2  2  6  3  0  1  2 #>  [241]  0  1  0 10  3  3  7  0  0  1  5  2  0  4  0  0  0  1  1  0  5  2  0  5 #>  [265]  0  1  6  2  4  0  3  4  4 13  3  1  2  2  2  2  2  2  8  0  4  0  3  3 #>  [289]  0  0  1  2  0  0  2  1  5  4  2  0  4  0  3  0  1 10  2  1  2  0  4  5 #>  [313]  1  2  3  0  3  2  1  2  1  2  4  1  1  0  1  5  1  0  0  1  0  0  1  0 #>  [337]  3  0  1  1  0  2  2  0  0  4  0  5  0  1  1  1  1  1  2  4  1  0  0  1 #>  [361]  0  8 11  2  4  0  1  0  7  0  3  0  7 11  2  6  0  0  3  5  5  0  0  7 #>  [385]  1  1  0  0  0  0  0  2  1  6  3  3  0  0  0  1  3  6  0  0  1  0  1  4 #>  [409]  3  1  3  0  2  2  0  0  1  0  0  0  1  1  5  9  1  2  1  1  3  0  2  1 #>  [433]  3  0  0  3  6  3 10  0  1  1  2  6  0  1  0  1  2  4  1  9  2  0  6  0 #>  [457]  2  2  0  6  6  3  1 13  0  9  0  0  6  5  4  0  1  0  3  0  3  9  4  1 #>  [481]  0  2  2  5  0  2  1  0  1  3  0  2  1  4  1  0  1  1  1  3  1  0  0  2 #>  [505]  4  0  2  1  1  0  2  2  0  3  2  0  0  1 12  0 13  2  1  8  5  3  2  2 #>  [529]  8  3  4  0  2  4  1  1  1  7  1  1  2  2 14  2  0  2  0  3  1  1  3  3 #>  [553]  1  5  3  1  4  1  3  4  2  3  3  0  6  1  2  2  0  0  0  1  1  3  0  1 #>  [577]  5  0  9  2  6  1  3  5 29  1  8  9 34 11 38 26  0  0  1  1  0  1 26  2 #>  [601] 11 27 11 13  6 21 18  0  4 10  3  9  3  0  1  2  2  0 21 18  9 19  0 14 #>  [625]  6  6 36 15  1  2  3  6  4 20  2  5  4  3  1  5 11 14  3 27  1 16  2 12 #>  [649]  6 31  4  2 23 11  4  3 11  3  2 28 11  3 10  0 10  5 10 13 18  1  2  8 #>  [673] 21  7  3  8  0 23  2 11  6 12  9  4  3  0  0  0  0  4  1  0  4  4  9  0 #>  [697]  0  1  5  1  4 16  6  0  6  4  6  1  0  1  2  5  2  2  1  0 10  3  2 11 #>  [721]  0  1  2  1  2  0  2  2  0  2  0 15  2  6  1  3  1  2  5  1  1  3  0  4 #>  [745]  3  1  0  1  0  1  1  0 14  1  2  1  0  6  0  0  0  0  4  4  0  5  6  5 #>  [769]  0  0  3  7  0  1  0  0  1  3  0  5  0  3  1  4  0  0  2  3  7  0  5  1 #>  [793]  3  2  1  1  0 17  0  1  4  3  5  2  8  1  0  0  0  7  0  0  8  1  0  0 #>  [817]  2  0  4  0  0  0  9  3  1  0  9  0  6  1  0  4  0  1  0  2  1  6  1  0 #>  [841]  0  5  3  3  0  1  4  0  1  0  5  1  1  6  1 10  3 13  0  4  3  0  5  6 #>  [865]  0  1  0  4  1  0  6  0  0  0  1  4  1  2  0  2  2  2  2  8  5  1  5  4 #>  [889]  2  0  0  0  1  5  0  0  0  9  5  0  0  0  0  0  1  3  0  2  8  3  2  3 #>  [913]  4  2  1  0  0  5  2  5  2  1  3  7  1  1  5  0  4  1  1  1  0  3  4  0 #>  [937]  2  1  8  6  2  3  1  2  8  0  2  0  2 17  1  2  8  0  4  0  5 10  8 64 #>  [961] 10 18  2  8  3  1  9 10  8  1  1 32  4  1  3  1 53  0 14  9 23  7  4 10 #>  [985]  9  0 47 21 12 15  1  0 12  1  7 20  7  2 10  6  1  4 13  4 19  6  5  0 #> [1009]  4  4 13  5  1 14  0 16  3 13  3  5  3 14  3  1 #>  #> $states #>    [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>   [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 #>   [75] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [149] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [186] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [223] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [260] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [297] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [334] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [371] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [408] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [445] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [482] 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [519] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [556] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 1 1 1 1 1 1 1 1 1 #>  [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [704] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 #>  [741] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [778] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [815] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [852] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #>  [889] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 #>  [926] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 #>  [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> [1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> Levels: 1 2 3 #>  #> $pi #> [1] 0.3333333 0.3333333 0.3333333 #>"},{"path":"/reference/hmm_simulate_normal_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data based on a Normal model for a Hidden Markov Model simulation — hmm_simulate_normal_data","title":"Simulate data based on a Normal model for a Hidden Markov Model simulation — hmm_simulate_normal_data","text":"Simulate data based Normal model Hidden Markov Model simulation","code":""},{"path":"/reference/hmm_simulate_normal_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data based on a Normal model for a Hidden Markov Model simulation — hmm_simulate_normal_data","text":"","code":"hmm_simulate_normal_data(L, mat_T, means, sigma)"},{"path":"/reference/hmm_simulate_normal_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data based on a Normal model for a Hidden Markov Model simulation — hmm_simulate_normal_data","text":"L (integer) number simulations mat_T (matrix) square matrix initial state means (numeric) mean parameter rnorm emission probabilities sigma (numeric) sd parameter rnorm emission probabilities","code":""},{"path":"/reference/hmm_simulate_normal_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data based on a Normal model for a Hidden Markov Model simulation — hmm_simulate_normal_data","text":"Returns data vector \"data\", \"true\" hidden states \"states\" used generate data vector prior probability states \"pi\".","code":""},{"path":"/reference/hmm_simulate_normal_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data based on a Normal model for a Hidden Markov Model simulation — hmm_simulate_normal_data","text":"","code":"mat_T0 <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) L <- 2^5 means0 <- c(-1,0,1) sigma0 <- 1  sim_data <- hmm_simulate_normal_data(L = L, mat_T = mat_T0, means = means0, sigma = sigma0) plot(density(sim_data$data), main = \"Density\")  sim_data #> $data #>  [1]  1.56325841 -0.36107091  0.76162332 -0.35248720  2.25720346 -0.23726469 #>  [7]  1.09091360 -2.11366853  0.35073058 -0.09161369  2.83055766  0.72584713 #> [13]  1.21571593  1.27204114  0.79485570  1.70887682  1.22342373  1.72892945 #> [19]  1.62653670  0.34999982 -0.04466095  1.73200310  1.78170343 -0.35340590 #> [25]  1.88667481  1.36523021  0.06370596  0.77973367  0.16645463  0.03104102 #> [31]  3.49316621  1.25766964 #>  #> $states #>  [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 #> Levels: 1 2 3 #>  #> $pi #> [1] 0.3333333 0.3333333 0.3333333 #>"},{"path":"/reference/hmm_simulate_poisgamma_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","title":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","text":"Simulate Hidden Markov Model based Poisson-gamma data","code":""},{"path":"/reference/hmm_simulate_poisgamma_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","text":"","code":"hmm_simulate_poisgamma_data(L, mat_T, betas, alpha)"},{"path":"/reference/hmm_simulate_poisgamma_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","text":"L (integer) number simulations mat_T (matrix) square matrix initial state betas (numeric) rate parameter rgamma emission probabilities alpha (numeric) shape parameter rgamma emission probabilities","code":""},{"path":"/reference/hmm_simulate_poisgamma_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","text":"returns data vector \"data\", \"true\" hidden states \"states\" used generate data vector prior probability states \"pi\".","code":""},{"path":"/reference/hmm_simulate_poisgamma_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Hidden Markov Model based on Poisson-gamma data — hmm_simulate_poisgamma_data","text":"","code":"mat_T <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) L <- 2^10 betas <- c(0.1, 0.3, 0.5) alpha <- 1  sim_data <- hmm_simulate_poisgamma_data(L = L,                                         mat_T = mat_T,                                         betas = betas,                                         alpha = alpha) hist(sim_data$data, breaks = 100, main = \"Histogram\")"},{"path":"/reference/kullback_leibler_cont_appr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a continuous approximation of the Kullback-Leibler divergence — kullback_leibler_cont_appr","title":"Calculate a continuous approximation of the Kullback-Leibler divergence — kullback_leibler_cont_appr","text":"Calculate continuous approximation Kullback-Leibler divergence","code":""},{"path":"/reference/kullback_leibler_cont_appr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a continuous approximation of the Kullback-Leibler divergence — kullback_leibler_cont_appr","text":"","code":"kullback_leibler_cont_appr(p, q)"},{"path":"/reference/kullback_leibler_cont_appr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a continuous approximation of the Kullback-Leibler divergence — kullback_leibler_cont_appr","text":"p (numeric) probabilities q (numeric) probabilities","code":""},{"path":"/reference/kullback_leibler_cont_appr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a continuous approximation of the Kullback-Leibler divergence — kullback_leibler_cont_appr","text":"Numeric vector","code":""},{"path":"/reference/kullback_leibler_cont_appr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a continuous approximation of the Kullback-Leibler divergence — kullback_leibler_cont_appr","text":"continuous approximation Kullback-Leibler divergence calculated follows: $$   \\frac{1}{n}\\sum_{=1}^n\\big[\\log(p_i) p_i - log(q_i) p_i \\big] $$","code":""},{"path":"/reference/kullback_leibler_cont_appr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a continuous approximation of the Kullback-Leibler divergence — kullback_leibler_cont_appr","text":"","code":"# Simulate n normally distributed variates n <- 1000 dist1 <- rnorm(n) dist2 <- rnorm(n, mean = 0, sd = 2) dist3 <- rnorm(n, mean = 2, sd = 2)  # Estimate probability density functions pdf1 <- density(dist1) pdf2 <- density(dist2) pdf3 <- density(dist3)  # Visualise PDFs plot(pdf1, main = \"PDFs\", col = \"red\", xlim = range(dist3)) lines(pdf2, col = \"blue\") lines(pdf3, col = \"green\")   # PDF 1 vs PDF 2 kullback_leibler_cont_appr(pdf1$y, pdf2$y) #> [1] 0.1197366  # PDF 1 vs PDF 3 kullback_leibler_cont_appr(pdf1$y, pdf3$y) #> [1] 0.1131  # PDF 2 vs PDF 2 kullback_leibler_cont_appr(pdf2$y, pdf3$y) #> [1] -0.004469439"},{"path":"/reference/kullback_leibler_disc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a Kullback-Leibler divergence for a discrete distribution — kullback_leibler_disc","title":"Calculate a Kullback-Leibler divergence for a discrete distribution — kullback_leibler_disc","text":"Calculate Kullback-Leibler divergence discrete distribution","code":""},{"path":"/reference/kullback_leibler_disc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a Kullback-Leibler divergence for a discrete distribution — kullback_leibler_disc","text":"","code":"kullback_leibler_disc(p, q)"},{"path":"/reference/kullback_leibler_disc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a Kullback-Leibler divergence for a discrete distribution — kullback_leibler_disc","text":"p (numeric) probabilities q (numeric) probabilities","code":""},{"path":"/reference/kullback_leibler_disc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a Kullback-Leibler divergence for a discrete distribution — kullback_leibler_disc","text":"Numeric vector","code":""},{"path":"/reference/kullback_leibler_disc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a Kullback-Leibler divergence for a discrete distribution — kullback_leibler_disc","text":"Kullback-Leibler divergence discrete distribution calculated follows: $$\\sum_{=1}^n p_i \\log\\Big(\\frac{p_i}{q_i}\\Big)$$","code":""},{"path":"/reference/kullback_leibler_disc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a Kullback-Leibler divergence for a discrete distribution — kullback_leibler_disc","text":"","code":"# Simulate n Poisson distributed variates n <- 1000 dist1 <- rpois(n, lambda = 1) dist2 <- rpois(n, lambda = 5) dist3 <- rpois(n, lambda = 20)  # Generate common factor levels x_max <- max(c(dist1, dist2, dist3)) all_levels <- 0:x_max  # Estimate probability mass functions  pmf_dist1 <- table(factor(dist1, levels = all_levels)) / n pmf_dist2 <- table(factor(dist2, levels = all_levels)) / n pmf_dist3 <- table(factor(dist3, levels = all_levels)) / n  # Visualise PMFs barplot(pmf_dist1, col = \"green\", xlim = c(0, x_max)) barplot(pmf_dist2, col = \"red\", add = TRUE) barplot(pmf_dist3, col = \"blue\", add = TRUE)   # Calculate distances kullback_leibler_disc(pmf_dist1, pmf_dist2) #> [1] 2.186725 kullback_leibler_disc(pmf_dist1, pmf_dist3) #> [1] 26.30768 kullback_leibler_disc(pmf_dist2, pmf_dist3) #> [1] 20.99147"},{"path":"/reference/oHMMed-package.html","id":null,"dir":"Reference","previous_headings":"","what":"oHMMed: Hidden Markov Models with ordered hidden states and emission densities with applications in population genetics — oHMMed-package","title":"oHMMed: Hidden Markov Models with ordered hidden states and emission densities with applications in population genetics — oHMMed-package","text":"oHMMed package contains implementation Hidden Markov Models ordered hidden states emission densities applications population genetics.","code":""},{"path":"/reference/oHMMed-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"oHMMed: Hidden Markov Models with ordered hidden states and emission densities with applications in population genetics — oHMMed-package","text":"TODO: Reference paper","code":""},{"path":[]},{"path":"/reference/oHMMed-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"oHMMed: Hidden Markov Models with ordered hidden states and emission densities with applications in population genetics — oHMMed-package","text":"Maintainer: Michal Majka michalmajka@hotmail.com (ORCID) Authors: Lynette Caitlin Mikula (ORCID) Claus Vogl","code":""},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for hmm_mcmc_gamma_poisson objects — plot.hmm_mcmc_gamma_poisson","title":"Plot method for hmm_mcmc_gamma_poisson objects — plot.hmm_mcmc_gamma_poisson","text":"Plot method hmm_mcmc_gamma_poisson objects","code":""},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for hmm_mcmc_gamma_poisson objects — plot.hmm_mcmc_gamma_poisson","text":"","code":"# S3 method for hmm_mcmc_gamma_poisson plot(   x,   simulation = FALSE,   true_betas = NULL,   true_alpha = NULL,   true_mat_T = NULL,   true_states = NULL,   ... )"},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for hmm_mcmc_gamma_poisson objects — plot.hmm_mcmc_gamma_poisson","text":"x (hmm_mcmc_gamma_poisson) hmm_mcmc_gamma_poisson object simulation (logical) true_betas (numeric) true_alpha (numeric) true_mat_T (matrix) true_states (integer) ... used","code":""},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for hmm_mcmc_gamma_poisson objects — plot.hmm_mcmc_gamma_poisson","text":"return value","code":""},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for hmm_mcmc_gamma_poisson objects — plot.hmm_mcmc_gamma_poisson","text":"TODO: details","code":""},{"path":"/reference/plot.hmm_mcmc_gamma_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for hmm_mcmc_gamma_poisson objects — plot.hmm_mcmc_gamma_poisson","text":"","code":"# \\donttest{ plot(example_hmm_mcmc_gamma_poisson) #> Registered S3 method overwritten by 'GGally': #>   method from    #>   +.gg   ggplot2             # }"},{"path":"/reference/plot.hmm_mcmc_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for hmm_mcmc_normal objects — plot.hmm_mcmc_normal","title":"Plot method for hmm_mcmc_normal objects — plot.hmm_mcmc_normal","text":"Plot method hmm_mcmc_normal objects","code":""},{"path":"/reference/plot.hmm_mcmc_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for hmm_mcmc_normal objects — plot.hmm_mcmc_normal","text":"","code":"# S3 method for hmm_mcmc_normal plot(   x,   simulation = FALSE,   true_means = NULL,   true_sd = NULL,   true_mat_T = NULL,   true_states = NULL,   ... )"},{"path":"/reference/plot.hmm_mcmc_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for hmm_mcmc_normal objects — plot.hmm_mcmc_normal","text":"x (hmm_mcmc_normal) hmm_mcmc_normal object simulation (logical) true_means (numeric) true_sd (numeric) true_mat_T (matrix) true_states (integer) ... used","code":""},{"path":"/reference/plot.hmm_mcmc_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for hmm_mcmc_normal objects — plot.hmm_mcmc_normal","text":"return value","code":""},{"path":"/reference/plot.hmm_mcmc_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for hmm_mcmc_normal objects — plot.hmm_mcmc_normal","text":"TODO: details","code":""},{"path":"/reference/plot.hmm_mcmc_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for hmm_mcmc_normal objects — plot.hmm_mcmc_normal","text":"","code":"# \\donttest{ plot(example_hmm_mcmc_normal)           # }"},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"Plot method hmm_mcmc_poisson objects","code":""},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"","code":"# S3 method for hmm_mcmc_poisson plot(   x,   simulation = FALSE,   true_betas = NULL,   true_alpha = NULL,   true_mat_T = NULL,   true_states = NULL,   ... )"},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"x (hmm_mcmc_\\*) MCMC HMM object simulation (logical) true_betas (numeric) true_alpha (numeric) true_mat_T (matrix) true_states (integer) ... used","code":""},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"return value","code":""},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"details","code":""},{"path":"/reference/plot.hmm_mcmc_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for hmm_mcmc_poisson objects — plot.hmm_mcmc_poisson","text":"","code":"plot(example_hmm_mcmc_pois)"},{"path":"/reference/posterior_prob_gamma_poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_prob_gamma_poisson","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_prob_gamma_poisson","text":"Forward-backward algorithm calculate posterior probabilities hidden states Poisson-Gamma model.","code":""},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_prob_gamma_poisson","text":"","code":"posterior_prob_gamma_poisson(data, pi, mat_T, betas, alpha)"},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_prob_gamma_poisson","text":"data (numeric) Poisson data pi (numeric) prior probability states mat_T (matrix) transition probability matrix betas (numeric) vector prior rates alpha (numeric) prior scale","code":""},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_prob_gamma_poisson","text":"TODO: List posterior probabilities (improve description)","code":""},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_prob_gamma_poisson","text":"TODO: details calculation made","code":""},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_prob_gamma_poisson","text":"TODO: references","code":""},{"path":"/reference/posterior_prob_gamma_poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_prob_gamma_poisson","text":"","code":"mat_T <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) L <- 2^10 betas <- c(0.1, 0.3, 0.5) alpha <- 1  sim_data <- hmm_simulate_gamma_poisson_data(L = L,                                             mat_T = mat_T,                                             betas = betas,                                             alpha = alpha) pi <- sim_data$pi hmm_poison_data <- sim_data$data hist(hmm_poison_data, breaks = 100)   # Calculate posterior probabilities of hidden states post_prob <- posterior_prob_gamma_poisson(data = hmm_poison_data,                                           pi = pi,                                           mat_T = mat_T,                                           betas = betas,                                           alpha = alpha) str(post_prob) #> List of 3 #>  $ F: num [1:1024, 1:3] 0.738 0.761 0.669 0.938 0.952 ... #>  $ B: num [1:1024, 1:3] 112 26.2 19.2 82.9 25.2 ... #>  $ s: num [1:1024] 0.0119 0.0495 0.0771 0.0128 0.0414 ..."},{"path":"/reference/posterior_prob_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_prob_normal","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_prob_normal","text":"Forward-backward algorithm calculate posterior probabilities hidden states.","code":""},{"path":"/reference/posterior_prob_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_prob_normal","text":"","code":"posterior_prob_normal(data, pi, mat_T, means, sdev)"},{"path":"/reference/posterior_prob_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_prob_normal","text":"data (numeric) normal data pi (numeric) prior probability states mat_T (matrix) transition probability matrix means (numeric) vector prior means sdev (numeric) prior standard deviation","code":""},{"path":"/reference/posterior_prob_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_prob_normal","text":"TODO: List posterior probabilities (improve description)","code":""},{"path":"/reference/posterior_prob_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_prob_normal","text":"TODO: details calculation made","code":""},{"path":"/reference/posterior_prob_normal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_prob_normal","text":"TODO: references","code":""},{"path":"/reference/posterior_prob_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_prob_normal","text":"","code":"prior_mat <- rbind(c(1-0.05, 0.05, 0),                   c(0.05, 1-0.1, 0.05),                   c(0, 0.05, 1-0.05))  prior_means <- c(-0.1, 0.0, 0.1) prior_sd  <- sqrt(0.1) L <- 100  # Simulate HMM model based on normal data based on prior information sim_data_normal <- hmm_simulate_normal_data(L = L,                                             mat_T = prior_mat,                                             means = prior_means,                                             sigma = prior_sd) pi <- sim_data_normal$pi # pi <- get_pi(prior_mat) hmm_norm_data <- sim_data_normal$data  # Calculate posterior probabilities of hidden states post_prob <-  posterior_prob_normal(data = hmm_norm_data,                                     pi = pi,                                     mat_T = prior_mat,                                     means = prior_means,                                     sdev = prior_sd) str(post_prob) #> List of 3 #>  $ F: num [1:100, 1:3] 0.474 0.406 0.381 0.441 0.563 ... #>  $ B: num [1:100, 1:3] 2.79 1.63 1.55 1.61 2.18 ... #>  $ s: num [1:100] 0.521 1.05 1.202 1.03 0.61 ..."},{"path":"/reference/posterior_probabilities_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"Forward-backward algorithm calculate posterior probabilities hidden states.","code":""},{"path":"/reference/posterior_probabilities_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"","code":"posterior_probabilities_normal(data, pi, mat_T, means, sdev)"},{"path":"/reference/posterior_probabilities_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"data (numeric) normal data pi (numeric) prior probability states mat_T (matrix) transition probability matrix means (numeric) vector prior means sdev (numeric) prior standard deviation","code":""},{"path":"/reference/posterior_probabilities_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"List posterior probabilities (CORRECTED)","code":""},{"path":"/reference/posterior_probabilities_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"details calculation made","code":""},{"path":"/reference/posterior_probabilities_normal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"references","code":""},{"path":"/reference/posterior_probabilities_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states. — posterior_probabilities_normal","text":"","code":"prior_mat <- rbind(c(1-0.05, 0.05, 0),                   c(0.05, 1-0.1, 0.05),                   c(0, 0.05, 1-0.05))  prior_means <- c(-0.1, 0.0, 0.1) prior_sd  <- sqrt(0.1) L <- 100  # Simulate HMM model based on normal data based on prior information sim_data_normal <- hmm_simulate_normal_data(L = L,                                             mat_T = prior_mat,                                             means = prior_means,                                             sigma = prior_sd) pi <- sim_data_normal$pi # pi <- get_pi(prior_mat) hmm_norm_data <- sim_data_normal$data  # Calculate posterior probabilities of hidden states post_prob <-  posterior_probabilities_normal(data = hmm_norm_data,                                              pi = pi,                                              mat_T = prior_mat,                                              means = prior_means,                                              sdev = prior_sd)"},{"path":"/reference/posterior_probabilities_poisgamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"Forward-backward algorithm calculate posterior probabilities hidden states Poisson-Gamma model.","code":""},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"","code":"posterior_probabilities_poisgamma(data, pi, mat_T, betas, alpha)"},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"data (numeric) Poisson data pi (numeric) prior probability states mat_T (matrix) transition probability matrix betas (numeric) vector prior rates alpha (numeric) prior scale","code":""},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"List posterior probabilities (CORRECTED)","code":""},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"details calculation made","code":""},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"references","code":""},{"path":"/reference/posterior_probabilities_poisgamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward-backward algorithm to calculate the posterior probabilities of hidden states in Poisson-Gamma model. — posterior_probabilities_poisgamma","text":"","code":"mat_T <- rbind(c(1-0.01,0.01,0),                c(0.01,1-0.02,0.01),                c(0,0.01,1-0.01)) L <- 2^10 betas <- c(0.1, 0.3, 0.5) alpha <- 1  sim_data <- hmm_simulate_poisgamma_data(L = L,                                         mat_T = mat_T,                                         betas = betas,                                         alpha = alpha) pi <- sim_data$pi hmm_poison_data <- sim_data$data hist(hmm_poison_data, breaks = 100)   # Calculate posterior probabilities of hidden states post_prob <-  posterior_probabilities_poisgamma(data = hmm_poison_data,                                                 pi = pi,                                                 mat_T = mat_T,                                                 betas = betas,                                                 alpha = alpha)"},{"path":"/news/index.html","id":"ohmmed-090","dir":"Changelog","previous_headings":"","what":"oHMMED 0.9.0","title":"oHMMED 0.9.0","text":"Initial release","code":""}]
